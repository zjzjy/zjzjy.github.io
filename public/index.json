[{"categories":["Agent"],"content":"本文根据Hugging Face上的Agent课程编写而成，包括 。 在本章节，我们将使用 Agentic RAG 创建一个工具来帮助主持晚会的友好经纪人 Alfred，该工具可用于回答有关晚会嘉宾的问题。 难忘的盛会 你决定举办一场本世纪最奢华、最奢华的派对。 这意味着丰盛的宴席、迷人的舞者、知名 DJ、精致的饮品、令人叹为观止的烟火表演等等。我们委托管家Alfred来全权举办这个盛会。为此，他需要掌握派对的所有信息，包括菜单、宾客、日程安排、天气预报等等！不仅如此，他还需要确保聚会取得成功，因此他需要能够在聚会期间回答有关聚会的任何问题 ，同时处理可能出现的意外情况。他无法独自完成这项工作，所以我们需要确保阿尔弗雷德能够获得他所需的所有信息和工具。 首先，我们给他列一份联欢晚会的硬性要求清单：在文艺复兴时期，受过良好教育的人需要具备三个主要特质：对体育、文化和科学知识的深厚造诣。因此，我们需要确保用我们的知识给宾客留下深刻印象，为他们打造一场真正难忘的盛会。然而，为了避免冲突， 在盛会上应该避免讨论政治和宗教等话题。 盛会需要充满乐趣，避免与信仰和理想相关的冲突。按照礼仪， 一位好的主人应该了解宾客的背景 ，包括他们的兴趣和事业。一位好的主人也会与宾客们闲聊八卦，分享他们的故事。最后，我们需要确保自己掌握一些天气常识 ，以便能够持续获得实时更新，确保在最佳时机燃放烟花，并以一声巨响结束庆典！🎆 创建工具 首先，我们将创建一个 RAG 工具，用于检索受邀者的最新详细信息。接下来，我们将开发用于网页搜索、天气更新和 Hugging Face Hub 模型下载统计的工具。 ","date":"222224-24-120","objectID":"/agent-agentic-rag/:0:0","tags":["Agent","Agentic RAG"],"title":"Agentic RAG - Usecase","uri":"/agent-agentic-rag/"},{"categories":["Agent"],"content":"为来宾创建 RAG 工具 我们将在HF Space开发我们的Agent。 tools.py：为Agent提供辅助工具。 retriever.py：实现检索功能，支持知识访问。 app.py：将所有组件集成到功能齐全的agent中。 使用的dataset，每个访客包含以下字段： Name: 客人的全名 Relation: 客人与主人的关系 Description：关于客人的简短传记或有趣的事实 Email Address：发送邀请或后续活动的联系信息 我们需要做的步骤： 加载并准备数据集 创建检索工具 将工具与Alfred集成 我们提供了三种不同 Agent 库的实现方式，你可以展开下面的折叠框查看各自的代码。 使用 smolagents 实现 # smol-agent code placeholder print(\"This is code for smolagents\") 使用 llama-index 实现 # llama-index code placeholder print(\"This is code for llama-index\") 使用 langgraph 实现 from typing import TypedDict, Annotated from langgraph.graph.message import add_messages from langchain_core.messages import AnyMessage, HumanMessage, AIMessage from langgraph.prebuilt import ToolNode from langgraph.graph import START, StateGraph from langgraph.prebuilt import tools_condition from langchain_huggingface import HuggingFaceEndpoint, ChatHuggingFace # Generate the chat interface, including the tools llm = HuggingFaceEndpoint( repo_id=\"Qwen/Qwen2.5-Coder-32B-Instruct\", huggingfacehub_api_token=HUGGINGFACEHUB_API_TOKEN, ) ","date":"222224-24-120","objectID":"/agent-agentic-rag/:1:0","tags":["Agent","Agentic RAG"],"title":"Agentic RAG - Usecase","uri":"/agent-agentic-rag/"},{"categories":["Agent"],"content":"本文根据Hugging Face上的Agent课程编写而成，包括 。 在本章节您将学习如何使用 LangGraph 框架构建应用程序，该框架旨在帮助您构建和协调复杂的 LLM 工作流程。LangGraph 是一个框架，它通过为您提供代理流程的控制工具，允许您构建可用于生产的应用程序。 相关资源： LangGraph 代理 - LangGraph 代理示例 LangChain academy - Full course on LangGraph from LangChain 什么是LangGraph，什么时候使用它？ LangGraph 是 LangChain 开发的用于管理集成 LLM 的应用程序的控制流的框架。 **那么，LangGraph与LangChain有什么不同？**LangChain 提供了一个标准接口，用于与模型和其他组件交互，可用于检索、LLM 调用和工具调用。LangChain 中的类可以在 LangGraph 中使用，但并非必须使用。这些包是不同的，可以单独使用，但最终，您在网上找到的所有资源都会同时使用这两个包。 什么时候应该使用 LangGraph？ 当你需要做一个“控制”和“自由”之间的权衡： 控制：确保可预测行为并维护。 自由：让LLM有更多空间去发挥创造力。 例如：CodeAgent非常自由，可以在单个操作步骤中调用多个工具，创建自己的工具等等，但这种行为可能让它们比使用JSON的常规代理更难以预测和控制。 LangGraph则处于另一个极端，当您需要“控制”agent的执行时，就会发挥作用。它为您提供了构建遵循可预测流程的应用程序的工具，同时仍然充分利用 LLM 的强大功能。简而言之，如果您的应用程序涉及一系列需要以特定方式协调的步骤，并且在每个连接点做出决策， 那么 LangGraph 可以提供您所需的结构 。 LangGraph 擅长的关键场景包括： 需要明确控制流程的多步骤推理过程 需要在步骤之间保持状态的应用程序 将确定性逻辑与人工智能功能相结合的系统 需要人工干预的工作流程 具有多个组件协同工作的复杂代理架构 LangGraph的构建模块 LangGraph 中的应用程序从入口点开始，并且根据执行情况，流程可能会转到一个函数或另一个函数，直到到达结束。 ","date":"212111-11-100","objectID":"/agent-langgraph/:0:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"State State是 LangGraph 的核心概念。它代表了流经应用程序的所有信息。 from typing_extensions import TypeDict class State(TyprDict): graph_state: str 状态是用户定义的 ，因此字段应该精心设计以包含决策过程所需的所有数据！💡： 仔细考虑您的应用程序需要在步骤之间跟踪哪些信息。 ","date":"212111-11-100","objectID":"/agent-langgraph/:1:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Node Node 时Python函数。每个Node： 将状态作为输入 执行操作 返回状态更新 def node_1(state): print(\"---Node 1----\") return {\"graph_state\": state['graph_state']+\"I am\"} def node_2(state): print(\"---Node 2---\") return {\"graph_state\": state['graph_state'] +\" happy!\"} def node_3(state): print(\"---Node 3---\") return {\"graph_state\": state['graph_state'] +\" sad!\"} Node可以包括什么呢？ LLM 调用 ：生成文本或做出决策 工具调用 ：与外部系统交互 条件逻辑 ：确定下一步 人工干预 ：获取用户输入 整个工作流程所需的一些Node（如 START 和 END）直接存在于 langGraph 中。 ","date":"212111-11-100","objectID":"/agent-langgraph/:2:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Edge Edge连接Node并定义图中的可能路径： import random from typing import Literal # Literal 类型允许你明确规定变量的具体可选值，这些值可以是字符串、整数、布尔值等不可变类型。 def decide_mood(state) -\u003e Literal[\"node_2\", \"node_3\"]: # Often, we will use state to decide on the next node to visit user_input = state['graph_state'] # Here, let's just do a 50 / 50 split between nodes 2, 3 if random.random() \u003c 0.5: # 50% of the time, we return Node 2 return \"node_2\" # 50% of the time, we return Node 3 return \"node_3\" Edges可以是： 直接 ：始终从节点 A 到节点 B 条件 ：根据当前状态选择下一个节点 ","date":"212111-11-100","objectID":"/agent-langgraph/:3:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"StateGraph StateGraph 是保存整个代理工作流程的容器： from IPython.display import Image, display from langgraph.graph import StaeGraph, START, END # 创建状态图并添加节点 builder = StateGraph(State) builder.add_node(\"node_1\", node_1) builder.add_node(\"node_2\", node_2) builder.add_node(\"node_3\", node_3) # 定义节点之间的连接关系（边） builder.add_edge(START, \"node_1\") builder.add_conditional_edges(\"node_1\", decide_mood) builder.add_edge(\"node_2\", END) builder.add_edge(\"node_3\", END) graph = builder.compile() # View display(Image(graph.get_graph().draw_mermaid_png())) # 调用 graph.invoke({\"graph_state\": \"Hi, this is Lance.\"}) # 输出 #---Node 1--- #---Node 3--- #{'graph_state': 'Hi, this is Lance. I am sad!'} 构建一个邮件助手吧！ 在这一小节，我们会实现Alfred的电子邮件处理系统，他需要执行以下操作： 阅读收到的电子邮件 将其归类为垃圾邮件或合法邮件 起草对合法电子邮件的初步回复 在合法的情况下向韦恩先生发送信息（仅打印） 这是我们将构建的工作流程： ","date":"212111-11-100","objectID":"/agent-langgraph/:4:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"设置环境 pip install langgraph langchain_openai import os from typing import TypedDict, List, Dict, Any, Optional from langgraph.graph import StateGraph, START, END from langchain_openai import ChatOpenAI from langchain_core.messages import HumanMessage ","date":"212111-11-100","objectID":"/agent-langgraph/:5:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Step 1: Define Our State 使您的State足够全面以跟踪所有重要信息，但避免添加不必要的细节。 class EmailState(TypedDict) # The email being processed email: Dict[str, Any] # Contains subject, sender, body, etc. # Category of the email (inquiry, complaint, etc.) email_category: Optional[str] # Reason why the email was marked as spam spam_reason: Optional[str] # Analysis and decisions is_spam: Optional[bool] # Response generation email_draft: Optional[str] # Processing metadata messages: List[DItc[str, Any]] ","date":"212111-11-100","objectID":"/agent-langgraph/:6:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Step 2: Define Our Nodes 现在我们创建构成节点的处理函数，想一想我们需要什么？ 小助手要读邮件，返回logs: 小助手在处理来自发送者某某关于某某主题的邮件 小助手要判断是不是垃圾邮件，从LLM回答中提取is_spam，reason，category。 小助手处理垃圾邮件 小助手起草回复 小助手回复整个过程 # Initialize LLM model = ChatOpenAI(temparature=0) def read_email(state: EmailState): \"\"\"Alfred reads and logs the incoming email\"\"\" email = state[\"email\"] # Here we might do some initial preprocessing print(f\"Alfred is processing an email from {email['sender']} with subject: {email['subject']}\") # No state changes needed here return {} def classify_email(state: EmailState): \"\"\"Alfred uses an LLM to determine if the email is spam or legitimate\"\"\" email = state[\"email\"] # prepare our prompt for the LLM prompt = f\"\"\" As Alfred the butler, analyze this email and determine if it is spam or legitimate. Email: From: {email['sender']} Subject: {email['subject']} Body: {email['body']} First, determine if this email is spam. If it is spam, explain why. If it is legitimate, categorize it (inquiry, complaint, thank you, etc.). \"\"\" # call the LLM messages = [HumanMessage(content=prompt)] response = model.invoke(messages) # Simple logic to parse the response (in a real app, you'd want more robust parsing) response_text = response.content.lower() is_spam = \"spam\" in response_text and \"not spam\" not in response_text #Extract a reson if it's spam spam_reason = None if is_spam and \"reason\" in response_text: spam_reason = response_text.spilt(\"reason:\")[1].strip() # Determine category if legitime email_category = None if not is_spam: categories = [\"inquiry\", \"complaint\", \"thank you\", \"request\", \"information\"] for category in categories: if category in response_text: email_category = category break # Update messages for tracking new_messages = state.get(\"messages\", []) + [ {\"role\": \"user\", \"content\": prompt}, {\"role\": \"assistant\", \"content\": response.content} ] # Return state updates return { \"is_spam\": is_spam, \"spam_reason\": spam_reason, \"email_category\": email_category, \"messages\": new_messages } def handle_spam(state: EmailState): \"\"\"Alfred discards spam email with a note\"\"\" print(f\"Alfred has marked the email as spam. Reason: {state['spam_reason']}\") print(\"The email has been moved to the spam folder.\") # We're done processing this email return {} def draft_response(state: EmailState): \"\"\"Alfred drafts a preliminary response for legitimate emails\"\"\" email = state[\"email\"] category = state[\"email_category\"] or \"general\" # Prepare our prompt for the LLM prompt = f\"\"\" As Alfred the butler, draft a polite preliminary response to this email. Email: From: {email['sender']} Subject: {email['subject']} Body: {email['body']} This email has been categorized as: {category} Draft a brief, professional response that Mr. Hugg can review and personalize before sending. \"\"\" # Call the LLM messages = [HumanMessage(content=prompt)] response = model.invoke(messages) # Update messages for tracking new_messages = state.get(\"messages\", []) + [ {\"role\": \"user\", \"content\": prompt}, {\"role\": \"assistant\", \"content\": response.content} ] # Return state updates return { \"email_draft\": response.content, \"messages\": new_messages } def notify_mr_hugg(state: EmailState): \"\"\"Alfred notifies Mr. Hugg about the email and presents the draft response\"\"\" email = state[\"email\"] print(\"\\n\" + \"=\"*50) print(f\"Sir, you've received an email from {email['sender']}.\") print(f\"Subject: {email['subject']}\") print(f\"Category: {state['email_category']}\") print(\"\\nI've prepared a draft response for your review:\") print(\"-\"*50) print(state[\"email_draft\"]) print(\"=\"*50 + \"\\n\") # We're done processing this email return {} ","date":"212111-11-100","objectID":"/agent-langgraph/:7:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Step 3: Define Our Routing Logic 我们需要一个函数来确定分类后要采取哪条路径： def route_email(state: EmailState) -\u003e str: \"\"\"Determine the next step based on spam classification\"\"\" if state[\"is_spam\"]: return \"spam\" else: return \"legitimate\" ","date":"212111-11-100","objectID":"/agent-langgraph/:8:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Step 4: Create the StateGraph and Define Edges # Create the graph email_graph = StateGraph(EmailState) # Add nodes email_graph.add_node(\"read_email\", read_email) email_graph.add_node(\"classify_email\", classify_email) email_graph.add_node(\"handle_spam\", handle_spam) email_graph.add_node(\"draft_response\", draft_response) email_graph.add_node(\"notify_mr_hugg\", notify_mr_hugg) # Start the edges email_graph.add_edge(START, \"read_email\") # Add edges - defining the flow email_graph.add_edge(\"read_email\", \"classify_email\") # Add conditional branching from classify_email email_graph.add_conditional_edges( \"classify_email\", route_email, { \"spam\": \"handle_spam\", \"legitimate\": \"draft_response\" } ) # Add the final edges email_graph.add_edge(\"handle_spam\", END) email_graph.add_edge(\"draft_response\", \"notify_mr_hugg\") email_graph.add_edge(\"notify_mr_hugg\", END) # Compile the graph compiled_graph = email_graph.compile() ","date":"212111-11-100","objectID":"/agent-langgraph/:9:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Step 5: Run the Application 让我们用合法电子邮件和垃圾邮件来测试我们的图表： # Example legitimate email legitimate_email = { \"sender\": \"john.smith@example.com\", \"subject\": \"Question about your services\", \"body\": \"Dear Mr. Hugg, I was referred to you by a colleague and I'm interested in learning more about your consulting services. Could we schedule a call next week? Best regards, John Smith\" } # Example spam email spam_email = { \"sender\": \"winner@lottery-intl.com\", \"subject\": \"YOU HAVE WON $5,000,000!!!\", \"body\": \"CONGRATULATIONS! You have been selected as the winner of our international lottery! To claim your $5,000,000 prize, please send us your bank details and a processing fee of $100.\" } # Process the legitimate email print(\"\\nProcessing legitimate email...\") legitimate_result = compiled_graph.invoke({ \"email\": legitimate_email, \"is_spam\": None, \"spam_reason\": None, \"email_category\": None, \"email_draft\": None, \"messages\": [] }) # Process the spam email print(\"\\nProcessing spam email...\") spam_result = compiled_graph.invoke({ \"email\": spam_email, \"is_spam\": None, \"spam_reason\": None, \"email_category\": None, \"email_draft\": None, \"messages\": [] }) ","date":"212111-11-100","objectID":"/agent-langgraph/:10:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Step 6：使用 Langfuse 📡 检查我们的邮件分拣代理 随着 Alfred 对邮件分拣代理进行微调，他越来越厌倦调试它的运行。代理本身就难以预测，也难以检查。但由于他的目标是构建终极垃圾邮件检测代理并将其部署到生产环境中，因此他需要强大的可追溯性，以便日后进行监控和分析。 首先，%pip install -q langfuse, 其次，我们 pip install Langchain （由于我们使用 LangFuse，因此需要 LangChain）：%pip install langchain。接下来，我们将 Langfuse API 密钥和主机地址添加为环境变量。您可以通过注册 Langfuse Cloud 或自行托管 Langfuse 来获取 Langfuse 凭据。 import os # Get keys for your project from the project settings page: https://cloud.langfuse.com os.environ[\"LANGFUSE_PUBLIC_KEY\"] = \"pk-lf-...\" os.environ[\"LANGFUSE_SECRET_KEY\"] = \"sk-lf-...\" os.environ[\"LANGFUSE_HOST\"] = \"https://cloud.langfuse.com\" # 🇪🇺 EU region # os.environ[\"LANGFUSE_HOST\"] = \"https://us.cloud.langfuse.com\" # 🇺🇸 US region 然后，我们配置 Langfuse callback_handler 并通过将 langfuse_callback 添加到图的调用来检测代理： config={“callbacks”: [langfuse_handler]} 。 from langfuse.callback import CallbackHandler # Initialize Langfuse CallbackHandler for LangGraph/Langchain (tracing) langfuse_handler = CallbackHandler() # Process legitimate email legitimate_result = compiled_graph.invoke( input={\"email\": legitimate_email, \"is_spam\": None, \"spam_reason\": None, \"email_category\": None, \"draft_response\": None, \"messages\": []}, config={\"callbacks\": [langfuse_handler]} ) 构建一个秘书agent吧！ 现在让我搭建一个助手Alfred，能够满足： 处理图像文档 使用视觉模型提取文本（视觉语言模型） 在需要时进行计算（演示常规工具） 分析内容并提供简明摘要 执行与文件相关的具体指令 秘书的工作流程遵循以下结构化模式： graph TD A(\"__start__\") --\u003e B[\"assistant\"] B -.-\u003e C[\"tools\"] C --\u003e B B -.-\u003e D(\"__end__\") ","date":"212111-11-100","objectID":"/agent-langgraph/:11:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"设置环境 import base64 from typing import List, TypedDict, Annotated, Optional from langchain_openai import ChatOpenAI from langchain_core.messages import AnyMessage, SystemMessage, HumanMessage from langgraph.graph.message import add_messages from langgraph.graph import START, StateGraph from langgraph.prebuilt import ToolNode, tools_condition from IPython.display import Image, display AnyMessage 是来自 Langchain 的一个定义消息的类， add_messages 是一个添加最新消息而不是用最新状态覆盖它的操作符。这是 LangGraph 中的一个新概念，您可以在状态中添加操作符来定义它们之间的交互方式。 class AgentState(TypedDict): # The document provided input_file: Optional[str] # Contains file path (PDF/PNG) messages: Annotated[list[AnyMessage], add_messages]# 对于AnyMessage执行add_messages定义的操作 ","date":"212111-11-100","objectID":"/agent-langgraph/:12:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"准备工具 由于涉及到视觉，采用gpt-4o模型 定义工具：使用视觉模型提取图中的文字，计算工具 vision_llm = ChatOpenAI(model = \"gpt-4o\") def extract_text(img_path: str) -\u003e str: \"\"\" Extract text from an image file using a multimodal model. Master Wayne often leaves notes with his training regimen or meal plans. This allows me to properly analyze the contents. \"\"\" all_text = \"\" try: # Read image and encode as base64 with open(img_path, \"rb\") as image_file: image_bytes = image_file.read()#二进制数据 image_base64 = base64.b64encode(image_bytes).decode(\"utf-8\")# 二进制数据转换为文本格式 # Prepare the prompt including the base64 image data message = [ HumanMessage( content=[ { \"type\": \"text\", \"text\":( \"Extract all the text from this image. \" \"Return only the extracted text, no explanations.\" ), }, { \"type\": \"image_url\", \"image_url\":{ \"url\": f\"data:image/png;base64,{image_base64}\"# data:[\u003c媒体类型\u003e][;base64],\u003c数据\u003e }, }, ] ) ] # Call the vision-capable model response = vision_llm.invoke(message) # Append extracted text all_text += response.content + \"\\n\\n\" return all_text.strip() except Exception as e: # A butler should handle errors gracefully error_msg = f\"Error extracting text: {str(e)}\" print(error_msg) return def divide(a: int, b: int) -\u003e float: \"\"\"Divide a and b - for Master Wayne's occasional calculations.\"\"\" return a / b # Equip the butler with tools tools = [ divide, extract_text ] llm = ChatOpenAI(model=\"gpt-4o\") llm_with_tools = llm.bind_tools(tools, parallel_tool_calls=False) ","date":"212111-11-100","objectID":"/agent-langgraph/:13:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"Nodes 关于工具的文本描述 系统prompt 更新信息 def assistant(state: AgentState): # System message textual_description_of_tool=\"\"\" extract_text(img_path: str) -\u003e str: Extract text from an image file using a multimodal model. Args: img_path: A local image file path (strings). Returns: A single string containing the concatenated text extracted from each image. divide(a: int, b: int) -\u003e float: Divide a and b \"\"\" image=state[\"input_file\"] sys_msg = SystemMessage(content=f\"You are a helpful butler named Alfred that serves Mr. Wayne and Batman. You can analyse documents and run computations with provided tools:\\n{textual_description_of_tool} \\n You have access to some optional images. Currently the loaded image is: {image}\") return { \"messages\": [llm_with_tools.invoke([sys_msg] + state[\"messages\"])], \"input_file\": state[\"input_file\"] } ","date":"212111-11-100","objectID":"/agent-langgraph/:14:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"The ReAct Pattern: How I Assist Mr. Wayne? 思考他的文件和请求 采用合适的工具采取行动 观察结果 根据需要重复，直到完全满足他的需要 同样的，我们需要构建graph，定义节点，添加edges # The graph builder = StartGraph(AgentState) # Define nodes: these do the work builder.add_node(\"assistant\", assistant) builder.add_node(\"tools\", ToolNode(tools)) # Define edges: these determine how the control flow moves builder.add_edge(START, \"assistant\") builder.add_conditional_edges( \"assistant\", # If the latest message requires a tool, route to tools # Otherwise, provide a direct response tools_condition, ) builder.add_edge(\"tools\", \"assistant\") react_graph = builder.compile() # Show the butler's thought process display(Image(react_graph.get_graph(xray=True).draw_mermaid_png())) 我们定义一个 tools 节点，其中包含工具列表。 assistant 节点只是绑定了工具的模型。我们创建一个包含 assistant 和 tools 节点的图。我们添加了一个 tools_condition 边，该边根据 assistant 是否调用 tools 路由到 End 或工具。 使用实例： 计算 messages = [HumanMessage(content=\"Divide 6790 by 5\")] messages = react_graph.invoke({\"messages\": messages, \"input_file\": None}) # Show the messages for m in messages['messages']: m.pretty_print() Human: Divide 6790 by 5 AI Tool Call: divide(a=6790, b=5) Tool Response: 1358.0 Alfred: The result of dividing 6790 by 5 is 1358.0. Analyzing Master Wayne’s Training Documents 当韦恩留下他的训练计划和​​用餐笔记时： messages = [HumanMessage(content=\"According to the note provided by Mr. Wayne in the provided images. What's the list of items I should buy for the dinner menu?\")] messages = react_graph.invoke({\"messages\": messages, \"input_file\": \"Batman_training_and_meals.png\"}) Human: According to the note provided by Mr. Wayne in the provided images. What's the list of items I should buy for the dinner menu? AI Tool Call: extract_text(img_path=\"Batman_training_and_meals.png\") Tool Response: [Extracted text with training schedule and menu details] Alfred: For the dinner menu, you should buy the following items: 1. Grass-fed local sirloin steak 2. Organic spinach 3. Piquillo peppers 4. Potatoes (for oven-baked golden herb potato) 5. Fish oil (2 grams) Ensure the steak is grass-fed and the spinach and peppers are organic for the best quality meal. ","date":"212111-11-100","objectID":"/agent-langgraph/:15:0","tags":["Agent","LangGraph"],"title":"LangGraph - Introduction","uri":"/agent-langgraph/"},{"categories":["Agent"],"content":"本文根据Hugging Face上的Agent课程编写而成，包括 。 什么是LlamaIndex？ LlamaIndex 是一个完整的工具包，用于使用索引和工作流创建基于LLM的Agent。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:0:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"LlamaIndex的关键部分以及它们如何帮助代理？ Components：在 LlamaIndex 中使用的基本构建块。 These include things like prompts, models, and databases.组件通常用于将 LlamaIndex 与其他工具和库连接起来。 Tools: 工具是提供特定功能（例如搜索、计算或访问外部服务）的组件。 Agents：能够使用工具并做出决策的自主组件。它们协调工具的使用，以实现复杂的目标。 Workflows：是将逻辑整合在一起的逐步流程。工作流或代理工作流是一种无需明确使用代理即可构建代理行为的方法。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:1:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"LlamaIndex的关键优势 清晰的工作流系统 ：工作流使用事件驱动和异步优先的语法，逐步分解代理的决策流程。这有助于您清晰地编写和组织逻辑。 使用 LlamaParse 进行高级文档解析 ：LlamaParse 是专为 LlamaIndex 制作的，因此集成是无缝的，尽管它是一项付费功能。 众多即用型组件 ：LlamaIndex 已经推出一段时间了，因此可以与许多其他框架兼容。这意味着它拥有许多经过测试且可靠的组件，例如 LLM、检索器、索引等等 LlamaHub ：是数百个此类组件、代理和工具的注册表，您可以在 LlamaIndex 中使用它们。 LlamaIndex的使用 ","date":"191953-53-20","objectID":"/agent-llamaindex/:2:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"LlamaHub 简介 LlamaHub 是一个包含数百个集成、代理和工具的注册表，您可以在 LlamaIndex 中使用它们。 那么应该怎么使用呢？ LlamaIndex 的安装说明在 LlamaHub 上提供了结构清晰的概述 。乍一看可能有点难以理解，但大多数安装命令通常都遵循一种易于记忆的格式 ： pip install llama-index-{component-type}-{framework-name} 让我们来尝试使用Hugging Face inference API integration安装 LLM 和嵌入组件的依赖项。 pip install llama-index-llms-huggingface-api llama-index-embeddings-huggingface 使用刚刚下载好的组件的示例： from llama_index.llms.huggingface_api import HuggingFaceInferenceAPI import os from dotenv import load_dotenv # Load the .env file load_dotenv() # Retrieve HF_TOKEN from the environment variables hf_token = os.getenv(\"HF_TOKEN\") llm = HuggingFaceInferenceAPI( model_name=\"Qwen/Qwen2.5-Coder-32B-Instruct\", temperature=0.7, max_tokens=100, token=hf_token, ) response = llm.complete(\"Hello, how are you?\") print(response) # I am good, how can I help you today? ","date":"191953-53-20","objectID":"/agent-llamaindex/:3:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"QueryEngine 组件 QueryEngine 组件可以用作代理的检索增强生成 (RAG) 工具。 现在，想想 Alfred 是如何工作的： 你请阿尔弗雷德帮忙策划一场晚宴 Alfred 需要检查你的日历、饮食偏好和过去成功的菜单 QueryEngine 帮助 Alfred 找到这些信息并使用它来计划晚宴 现在，让我们更深入地了解组件，看看如何组合组件来创建 RAG 管道。 RAG包含五个关键步骤： Loading：指的是将数据从其所在位置（无论是文本文件、PDF、其他网站、数据库还是 API）加载到您的工作流程中。LlamaHub 提供数百种集成方案供您选择。 Indexing：这意味着创建一个允许查询数据的数据结构。对于LLM来说，这几乎总是意味着创建向量嵌入。向量嵌入是数据含义的数值表示。索引还可以指许多其他元数据策略，以便于根据属性准确地找到上下文相关的数据。 Storing：一旦您的数据被索引，您将需要存储您的索引以及其他元数据，以避免重新索引它。 Querying：对于任何给定的索引策略，您可以通过多种方式利用 LLM 和 LlamaIndex 数据结构进行查询，包括子查询、多步骤查询和混合策略。 Evaluation：任何流程中的关键步骤是检查其相对于其他策略的有效性，或检查何时进行更改。评估可以客观衡量您对查询的响应的准确性、可靠性和速度。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:4:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Loading and embedding documents LlamaIndex 可以在您自己的数据上工作，但是， 在访问数据之前，我们需要加载它。 将数据加载到 LlamaIndex 主要有三种方法： SimpleDirectoryReader ：用于从本地目录加载各种文件类型的内置加载器。 from llama_index.core import SimpleDirectoryReader reader = SimpleDirectoryReader(input_dir = \"path/to/directory\") documents = reader.load_data() 这个多功能组件可以从文件夹中加载各种文件类型，并将它们转换为 LlamaIndex 可以使用的 Document 对象。 加载文档后，我们需要将它们分解成更小的部分，称为 Node 对象。Node 只是原始文档中的一段文本，方便AI处理，同时仍然保留对原始 Document 对象的引用。 IngestionPipeline 通过两个关键转换帮助我们创建这些节点。 SentenceSplitter 按照自然句子边界将文档拆分为可管理的块。 HuggingFaceEmbedding 将每个块转换为数字嵌入 - 以 AI 可以有效处理的方式捕捉语义含义的矢量表示。 from llama_index.core import Document from llama_index.embeddings.huggingface import HuggingFaceEmbedding from llama_index.core.node_parser import SentenceSplitter from llama_index.core.ingestion import IngestionPipeline # create the pipeline with transformations pipeline = IngestionPipeline( transformations = [ SentenceSplitter(chunk_overlap=0), HuggingFaceEmbedding(model_name = \"BAAI/bge-small-en-v1.5\"), ] ) nodes = await pipeline.arun(documents=[Document.example()]) LlamaParse ：LlamaParse，LlamaIndex 用于 PDF 解析的官方工具，可作为托管 API 使用。 LlamaHub ：数百个数据加载库的注册表，用于从任何来源提取数据。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:4:1","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Storing and indexing documents 创建 Node 对象后，我们需要对它们进行索引以使它们可搜索，但在执行此操作之前，我们需要一个地方来存储我们的数据。 由于我们使用的是提取管道，因此可以直接将向量存储附加到管道来填充数据。在本例中，我们将使用 Chroma 来存储文档。 可以在 LlamaIndex 文档中找到不同向量存储的概述。 import chromadb from llama_index.vector_stores.chroma import ChromaVectorStore db = chromadb.PersistentClient(path=\"./alfred_chroma_db\") # 创建持久化客户端，将数据存储在本地文件系统（而非内存）。 chroma_collection = db.get_or_create_collection('alfred') # 获取或创建向量集合 vector_store = ChromaVectorStore(chroma_collection = chroma_collection) # 将 Chroma 集合包装为 LlamaIndex 兼容的向量存储接口。 pipeline = IngestionPipeline( transformations=[ SentenceSplitter(chunk_size = 25, chunk_overlap = 0), HuggingFaceEmbedding(model_name=\"BAAI/bge-small-en-v1.5\"), ], vector_store = vector_store, ) 通过将查询和节点嵌入 VectorStoreIndex 同一个向量空间中，我们可以找到相关的匹配项。 让我们看看如何从向量存储和嵌入中创建这个索引。 from llama_index.core import VectorStoreIndex from llama_index.embeddings.huggingface import HuggingFaceEmbedding embed_model = HuggingFaceEmbedding(model_name=\"BAAI/bge-small-en-v1.5\") index = VectorStoreIndex.from_vector_store(vector_store, embed_model=embed_model) 所有信息都会自动保存在 ChromaVectorStore 对象和传递的目录路径中。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:4:2","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Querying a VectorStoreIndex with prompts and LLMs 在查询索引之前，我们需要将其转换为查询接口。最常见的转换选项是： as_retriever ：用于基本文档检索，返回具有相似度分数的 NodeWithScore 对象列表 as_query_engine ：对于单个问答交互，返回书面答复 from llama_index.llms.huggingface_api import HuggingFaceInferenceAPI llm = HuggingFaceInferenceAPI(model_name=\"Qwen/Qwen2.5-Coder-32B-Instruct\") query_engine = index.as_query_engine( llm = llm, response_mode = \"tree_summarize\"#先从检索到的多个文档片段中生成局部摘要。再将这些摘要递归合并为最终答案，确保回答全面且连贯。 ) query_engine.query(\"What is the meaning of life?\") as_chat_engine ：对于在多条消息中保持记忆的对话交互，使用聊天历史记录和索引上下文返回书面回复。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:4:3","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Response Processing 在底层，查询引擎不仅使用 LLM 来回答问题，还使用 ResponseSynthesizer 作为处理响应的策略。同样，这是完全可定制的，但主要有三种开箱即用的策略： refine ：通过按顺序遍历每个检索到的文本块来创建并优化答案。这会为每个节点/检索到的文本块单独调用一次 LLM。 compact （默认）：类似于细化，但事先连接块，从而减少 LLM 调用。 tree_summarize ：通过遍历每个检索到的文本块并创建答案的树形结构来创建详细的答案。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:4:4","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Evaluation and observability LlamaIndex 提供内置评估工具来评估响应质量。 这些评估人员利用 LLM 来分析不同维度的响应。 让我们看一下可用的三个主要评估器： FaithfulnessEvaluator ：通过检查答案是否得到上下文支持来评估答案的真实性。 AnswerRelevancyEvaluator ：通过检查答案是否与问题相关来评估答案的相关性。 CorrectnessEvaluator ：通过检查答案是否正确来评估答案的正确性。 from llama_index.core.evaluation import FaithfulnessEvaluator query_engine = # from the previous section llm = # from the previous section # query index evaluator = FaithfulnessEvaluator(llm=llm) response = query_engine.query( \"What battles took place in New York City in the American Revolution?\" ) eval_result = evaluator.evaluate_response(response=response) eval_result.passing 评估流程： 分解回答：将回答拆分为多个独立的陈述（如 “Long Island 战役发生在纽约市” 和 “Fort Washington 战役发生在纽约市”）。 检查依据：针对每个陈述，验证是否存在于检索到的上下文中。 生成评估结果： passing：布尔值，表示回答是否完全忠实于上下文。 score：分数（0-1），表示忠实程度。 feedback：详细反馈，指出不忠实的陈述及原因。 安装 LlamaTrace 正如 LlamaHub 部分介绍的那样，我们可以使用以下命令从 Arize Phoenix 安装 LlamaTrace 回调： pip install -U llama-index-callbacks-arize-phoenix import llama_index import os PHOENIX_API_KEY = \"\u003cPHOENIX_API_KEY\u003e\" os.environ[\"OTEL_EXPORTER_OTLP_HEADERS\"] = f\"api_key={PHOENIX_API_KEY}\" llama_index.core.set_global_handler( \"arize_phoenix\", endpoint=\"https://llamatrace.com/v1/traces\" ) ","date":"191953-53-20","objectID":"/agent-llamaindex/:4:5","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"使用LlamaIndex中的工具 LlamaIndex 中有四种主要类型的工具 ： FunctionTool ：将任何 Python 函数转换为代理可以使用的工具。它会自动理解函数的工作原理。 QueryEngineTool ：允许代理使用查询引擎的工具。由于代理构建于查询引擎之上，因此它们也可以使用其他代理作为工具。 Toolspecs ：社区创建的工具集，通常包括用于特定服务（如 Gmail）的工具。 Utility Tools ：帮助处理来自其他工具的大量数据的特殊工具。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:5:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Creating a FunctionTool FunctionTool 提供了一种简单的方法来包装任何 Python 函数并将其提供给代理。您可以将同步或异步函数以及可选的 name 和 description 参数传递给该工具。 from llama_index.core.tools import FunctionTool def get_weather(location: str) -\u003e str: \"\"\"Useful for getting the weather for a given location.\"\"\" print(f\"Getting weather for {location}\") return f\"The weather in {location} is sunny\" tool = FuntionTool.from_defaults( get_weather, name = \"my_weather_tool\", description=\"Useful for getting the weather for a given location.\", ) tool.call(\"New York\") ","date":"191953-53-20","objectID":"/agent-llamaindex/:5:1","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Creating a QueryEngineTool 使用 QueryEngineTool 类，我们可以轻松地将上一单元中定义的 QueryEngine 转换为工具。让我们在下面的示例中看看如何从 QueryEngine 创建 QueryEngineTool 。 from llama_index.core import VectorStoreIndex from llama_index.core.tools import QueryEngineTool from llama_index.llms.huggingface_api import HuggingFaceInferenceAPI from llama_index.embeddings.huggingface import HuggingFaceEmbedding from llama_index.vector_stores.chroma import ChromaVectorStore embed_model = HuggingFaceEmbedding(\"BAAI/bge-small-en-v1.5\") db = chromadb.PersistentClient(path=\"./alfred_chroma_db\") chroma_collection = db.get_or_create_collection(\"alfred\") vector_store = ChromaVectorStore(chroma_collection=chroma_collection) index = VectorStoreIndex.from_vector_store(vector_store, embed_model=embed_model) llm = HuggingFaceInferenceAPI(model_name=\"Qwen/Qwen2.5-Coder-32B-Instruct\") query_engine = index.as_query_engine(llm=llm) tool = QueryEngineTool.from_defaults(query_engine, name=\"some useful name\", description=\"some useful description\") ","date":"191953-53-20","objectID":"/agent-llamaindex/:5:2","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Creating Toolspecs 可以将 ToolSpecs 视为协同工作的工具集合，就像一个井然有序的专业工具包。正如机械师的工具包包含用于车辆维修的互补工具一样， ToolSpec 可以将相关工具组合起来用于特定用途。例如，会计代理的 ToolSpec 可以巧妙地集成电子表格功能、电子邮件功能和计算工具，从而精准高效地处理财务任务。 pip install llama-index-tools-google 加载工具规范并将其转换为工具列表。 from llama_index.tools.google import GmailToolSpec tool_spec = GmailToolSpec() tool_spec_list = tool_spec.to_tool_list() [(tool.metadata.name, tool.metadata.description) for tool in tool_spec_list]# 查看每个工具的 metadata ","date":"191953-53-20","objectID":"/agent-llamaindex/:5:3","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Model Context Protocol (MCP) in LlamaIndex LlamaIndex 还允许通过 LlamaHub 上的 ToolSpec 使用 MCP 工具。您可以简单地运行一个 MCP 服务器，并通过以下实现开始使用它。 pip install llama-index-tools-mcp from llama_index.tools.mcp import BasicMCPClient, McpToolSpec from llama_index.tools.mcp import BasicMCPClient, McpToolSpec # We consider there is a mcp server running on 127.0.0.1:8000, or you can use the mcp client to connect to your own mcp server. mcp_client = BasicMCPClient(\"http://127.0.0.1:8000/sse\")#建立与 MCP 服务器的连接 mcp_tool = McpToolSpec(client=mcp_client)#将 MCP 客户端包装为 LlamaIndex 工具 # get the agent agent = await get_agent(mcp_tool) # create the agent context agent_context = Context(agent)#创建代理上下文 ","date":"191953-53-20","objectID":"/agent-llamaindex/:5:4","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Utility Tools 通常，直接查询 API 可能会返回过多的数据 ，其中一些数据可能不相关，溢出 LLM 的上下文窗口，或者不必要地增加您正在使用的令牌数量。下面让我们来介绍一下我们的两个主要实用工具。You can find toolspecs and utility tools on the LlamaHub. OnDemandToolLoader ：此工具可将任何现有的 LlamaIndex 数据加载器（BaseReader 类）转换为代理可以使用的工具。调用此工具时，可以使用触发数据加载器 load_data 所需的所有参数以及自然语言查询字符串。在执行过程中，我们首先从数据加载器加载数据，对其进行索引（例如使用向量存储），然后“按需”查询。所有这三个步骤都可在一次工具调用中完成。 LoadAndSearchToolSpec ：LoadAndSearchToolSpec 接受任何现有工具作为输入。作为工具规范，它实现了 to_tool_list ，当调用该函数时，会返回两个工具：一个加载工具和一个搜索工具。加载工具的执行会调用底层工具，然后对输出进行索引（默认使用向量索引）。搜索工具的执行会接受查询字符串作为输入，并调用底层索引。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:5:5","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"在LlamaIndex中使用Agent LlamaIndex 支持三种主要类型的推理代理： Function Calling Agents ——它们与可以调用特定函数的 AI 模型一起工作。 ReAct Agents - 它们可以与任何进行聊天或文本端点的 AI 一起工作并处理复杂的推理任务。 Advanced Custom Agents - 这些代理使用更复杂的方法来处理更复杂的任务和工作流程。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:6:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"初始化Agents 要创建代理，我们首先要为其提供一组定义其功能的函数/工具 。 from llama_index.llms.huggingface_api import HuggingFaceInferenceAPI from llama_index.core.agent.workflow import AgentWorkflow from llama_index.core.tools import FunctionTool # define sample Tool -- type annotations, function names, and docstrings, are all included in parsed schemas! def multiply(a: int, b: int) -\u003e int: \"\"\"Multiplies two integers and returns the resulting integer\"\"\" return a * b # initialize llm llm = HuggingFaceInferenceAPI(model_name=\"Qwen/Qwen2.5-Coder-32B-Instruct\") # initialize agent agent = AgentWorkflow.from_tools_or_functions(#将工具（Tools）或函数（Functions）注册到代理中 [FunctionTool.from_defaults(multiply)], llm=llm ) 代理默认是无状态的 ，使用 Context 对象可以选择记住过去的交互，如果您想使用需要记住以前交互的代理，这可能会很有用，例如在多个消息中维护上下文的聊天机器人或需要跟踪进度的任务管理器。很棒的异步指南 。 # stateless response = await agent.run(\"What is 2 times 2?\") # remembering state from llama_index.core.workflow import Context ctx = Context(agent) response = await agent.run(\"My name is Bob.\", ctx=ctx)#将上下文对象传递给每次调用，保持状态连续性。 response = await agent.run(\"What was my name again?\", ctx=ctx) ","date":"191953-53-20","objectID":"/agent-llamaindex/:6:1","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"使用 QueryEngineTools 创建 RAG 代理 Agentic RAG 是一种强大的工具，它能够利用代理来解答数据相关问题。 我们可以将各种工具传递给 Alfred，帮助他解答问题。不过，Alfred 可以选择使用任何其他工具或流程来解答问题，而不是自动在文档上进行解答。 将 QueryEngine 包装为代理工具很容易。包装时，我们需要定义名称和描述 。LLM 将使用这些信息来正确使用该工具。让我们看看如何使用我们在组件部分创建的 QueryEngine 加载 QueryEngineTool 。 from llama_index.core.tools import QueryEngineTool query_engine = index.as_query_engine(llm=llm, similarity_top_k=3) # as shown in the Components in LlamaIndex section query_engine_tool = QueryEngineTool.from_defaults( query_engine=query_engine, name=\"name\", description=\"a specific description\", return_direct=False, ) query_engine_agent = AgentWorkflow.from_tools_or_functions( [query_engine_tool], llm=llm, system_prompt=\"You are a helpful assistant that has access to a database containing persona descriptions. \" ) ","date":"191953-53-20","objectID":"/agent-llamaindex/:6:2","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Creating Multi-agent systems AgentWorkflow 类还直接支持多代理系统。通过为每个代理赋予名称和描述，系统可以维护单个活跃的发言者，并且每个代理都可以将发言权移交给另一个代理。 LlamaIndex 中的代理也可以直接用作其他代理的工具 ，用于更复杂和自定义的场景。 from llama_index.core.agent.workflow import ( AgentWorkflow, FunctionAgent, ReActAgent, ) # Define some tools def add(a: int, b: int) -\u003e int: \"\"\"Add two numbers.\"\"\" return a + b def subtract(a: int, b: int) -\u003e int: \"\"\"Subtract two numbers.\"\"\" return a - b # Create agent configs # NOTE: we can use FunctionAgent or ReActAgent here. # FunctionAgent works for LLMs with a function calling API. # ReActAgent works for any LLM. calculator_agent = ReActAgebt( name = 'calculator', description=\"Performs basic arithmetic operations\", system_prompt=\"You are a calculator assistant. Use your tools for any math operation.\", tools = [add, substract], llm = llm, ) query_agent = ReActAgent( name=\"info_lookup\", description=\"Looks up information about XYZ\", system_prompt=\"Use your tool to query a RAG system to answer information about XYZ\", tools=[query_engine_tool], llm=llm ) agent = AgentWorkflow( agents=[calculator_agent, query_agent], root_agent=\"calculator\" ) # Run the system response = await agent.run(user_msg=\"Can you add 5 and 3?\") 在 LlamaIndex 中创建代理工作流 LlamaIndex 中的工作流提供了一种结构化的方法，将您的代码组织成连续且可管理的步骤。 这样的工作流是通过定义由 Events 触发的 Steps 来创建的，这些步骤本身会发出 Events 来触发后续步骤。让我们来看看 Alfred 如何演示 RAG 任务的 LlamaIndex 工作流。 工作流程在代理的自主性与保持对整个工作流程的控制之间取得了很好的平衡。 ","date":"191953-53-20","objectID":"/agent-llamaindex/:6:3","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"创建工作流 首先安装需要的包 pip install llama-index-utils-workflow 我们可以通过定义一个继承自 Workflow 的类，并用 @step 装饰函数来创建单步工作流。我们还需要添加 StartEvent 和 StopEvent ，它们是用于指示工作流开始和结束的特殊事件。 from llama_index.core.workflow import StartEvent, StopEvent, Workflow, step class MyWorkflow(Workflow): @step async def my_step(self, ev: StartEvent) -\u003e StopEvent: # do something here return StopEvent(result=\"Hello, world!\") w = MyWorkflow(timeout=10, verbose=False) result = await w.run() ","date":"191953-53-20","objectID":"/agent-llamaindex/:7:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"连接多个步骤 为了连接多个步骤，我们创建在步骤之间传递数据的自定义事件。 为此，我们需要添加一个在步骤之间传递的 Event ，并将第一步的输出传输到第二步。 from llama_index.core.workflow import Event class ProcessingEvent(Event) intermediate_result: str class MultiStepWorkflow(Workflow): @step async def step_one(self, ev: StartEvent) -\u003e ProcessingEvent # Process initial data return ProcessingEvent(intermediate_result='Step 1 complete') @step async def step_two(self, ev: ProcessingEvent) -\u003e StopEvent: # Use the intermediate result final_result = f\"Finished processing: {ev.intermediate_result}\" return StopEvent(result=final_result) w = MultiStepWorkflow(timeout=10, verbose=False) result = await w.run() result ","date":"191953-53-20","objectID":"/agent-llamaindex/:8:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"循环和分支 类型提示是工作流中最强大的部分，因为它允许我们创建分支、循环和连接以促进更复杂的工作流。 让我们展示一个使用联合运算符 | 创建循环的示例。在下面的示例中，我们看到 LoopEvent 被作为步骤的输入，也可以作为输出返回。 step_one 输入： 首次执行：接收StartEvent（工作流启动）。 循环执行：接收LoopEvent（携带重试信息）。 输出： 50% 概率返回LoopEvent，触发循环。 50% 概率返回ProcessingEvent，进入下一步。 from llama_index.core.workflow import Event import random class ProcessingEvent(Event): intermediate_result: str class LoopEvent(Event): loop_output: str class MultiStepWorkflow(Workflow): @step async def step_one(self, ev: StartEvent | LoopEvent) -\u003e ProcessingEvent | LoopEvent: if random.randint(0, 1) == 0: print(\"Bad thing happened\") return LoopEvent(loop_output=\"Back to step one.\") else: print(\"Good thing happened\") return ProcessingEvent(intermediate_result=\"First step complete.\") @step async def step_two(self, ev: ProcessingEvent) -\u003e StopEvent: # Use the intermediate result final_result = f\"Finished processing: {ev.intermediate_result}\" return StopEvent(result=final_result) w = MultiStepWorkflow(verbose=False) result = await w.run() result ","date":"191953-53-20","objectID":"/agent-llamaindex/:9:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Drawing Workflows 我们还可以绘制工作流程。让我们使用 draw_all_possible_flows 函数来绘制工作流程。该函数将工作流程存储在 HTML 文件中。 from llama_index.utils.workflow import draw_all_possible_flows w = ... # as defined in the previous section draw_all_possible_flows(w, \"flow.html\") ","date":"191953-53-20","objectID":"/agent-llamaindex/:10:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"状态管理 当您想要跟踪工作流的状态，以便每个步骤都能访问相同的状态时，状态管理非常有用。我们可以在步骤函数的参数上使用 Context 类型提示来实现这一点。 from llama_index.core.workflow import Context, StartEvent, StopEvent @step async def query(self, ctx: Context, ev: StartEvent) -\u003e StopEvent: #存储查询到上下文 await ctx.set(\"query\", \"What is the capital of France?\") # do something with context and event val = ... # 从上下文检索查询 query = await ctx.get(\"query\") return StopEvent(result=val) ","date":"191953-53-20","objectID":"/agent-llamaindex/:11:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"Automating workflows with Multi-Agent Workflows 我们可以使用 AgentWorkflow 类来创建多代理工作流，而无需手动创建工作流 。 AgentWorkflow 使用工作 AgentWorkflow 代理，允许您创建一个由一个或多个代理组成的系统，这些代理可以根据各自的特定功能进行协作并相互交接任务。这使我们能够构建复杂的代理系统，其中不同的代理负责处理任务的不同方面。我们不会从 llama_index.core.agent 导入类，而是从 llama_index.core.agent.workflow 导入代理类。必须在 AgentWorkflow 构造函数中指定一个代理作为根代理。当用户消息传入时，它会首先路由到根代理。 然后每个代理可以： 使用他们的工具直接处理请求 移交给另一个更适合该任务的代理 向用户返回响应 from llama_index.core.agent.workflow import AgentWorkflow, ReActAgent from llama_index.llms.huggingface_api import HuggingFaceInferenceAPI # Define some tools def add(a: int, b: int) -\u003e int: \"\"\"Add two numbers.\"\"\" return a + b def multiply(a: int, b: int) -\u003e int: \"\"\"Multiply two numbers.\"\"\" return a * b llm = HuggingFaceInferenceAPI(model_name=\"Qwen/Qwen2.5-Coder-32B-Instruct\") # we can pass functions directly without FunctionTool -- the fn/docstring are parsed for the name/description multiply_agent = ReActAgent( name=\"multiply_agent\", description=\"Is able to multiply two integers\", system_prompt=\"A helpful assistant that can use a tool to multiply numbers.\", tools=[multiply], llm=llm, ) addition_agent = ReActAgent( name=\"add_agent\", description=\"Is able to add two integers\", system_prompt=\"A helpful assistant that can use a tool to add numbers.\", tools=[add], llm=llm, ) # Create the workflow workflow = AgentWorkflow( agents=[multiply_agent, addition_agent], root_agent=\"multiply_agent\", ) # Run the system response = await workflow.run(user_msg=\"Can you add 5 and 3?\") 代理工具还可以修改我们之前提到的工作流状态。在启动工作流之前，我们可以提供一个初始状态字典，供所有代理使用。该状态存储在工作流上下文的 state 键中。它将被注入到 state_prompt 中，用于增强每条新的用户消息。Let’s inject a counter to count function calls by modifying the previous example: from llama_index.core.workflow import Context # Define some tools async def add(ctx: Context, a: int, b: int) -\u003e int: \"\"\"Add two numbers.\"\"\" # update our count cur_state = await ctx.get(\"state\") cur_state[\"num_fn_calls\"] += 1 await ctx.set(\"state\", cur_state) return a + b async def multiply(ctx: Context, a: int, b: int) -\u003e int: \"\"\"Multiply two numbers.\"\"\" # update our count cur_state = await ctx.get(\"state\") cur_state[\"num_fn_calls\"] += 1 await ctx.set(\"state\", cur_state) return a * b ... workflow = AgentWorkflow( agents=[multiply_agent, addition_agent], root_agent=\"multiply_agent\" initial_state={\"num_fn_calls\": 0}, state_prompt=\"Current state: {state}. User message: {msg}\", ) # run the workflow with context ctx = Context(workflow) response = await workflow.run(user_msg=\"Can you add 5 and 3?\", ctx=ctx) # pull out and inspect the state state = await ctx.get(\"state\") print(state[\"num_fn_calls\"]) ","date":"191953-53-20","objectID":"/agent-llamaindex/:12:0","tags":["Agent","LlamaIndex"],"title":"LlamaIndex - Introduction","uri":"/agent-llamaindex/"},{"categories":["Agent"],"content":"本文根据Hugging Face上的Agent课程编写而成，包括 。 相关资源： smolagents Documentation - Official docs for the smolagents library Building Effective Agents - Research paper on agent architectures Agent Guidelines - Best practices for building reliable agents LangGraph Agents - Additional examples of agent implementations Function Calling Guide - Understanding function calling in LLMs RAG Best Practices - Guide to implementing effective RAG smolagents Blog - Introduction to smolagents and code interactions 什么是smolagents，为什么要使用smolagents？ smolagents 是一个 Hugging Face 库。smolagents 是一个简单但功能强大的 AI 代理构建框架。它为LLM提供了与现实世界交互的能力，例如搜索或生成图像。 ","date":"171719-19-30","objectID":"/agent-smolagents/:0:0","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"主要优势 简单性： 最小的代码复杂性和抽象性，使框架易于理解、采用和扩展。 灵活的 LLM 支持： 通过与 Hugging Face 工具和外部 API 集成，可与任何 LLM 配合使用 代码优先方法： 对代码代理提供一流的支持，这些代理直接在代码中编写其操作，无需解析并简化工具调用 HF Hub 集成： 与 Hugging Face Hub 无缝集成，允许使用 Gradio Spaces 作为工具 ","date":"171719-19-30","objectID":"/agent-smolagents/:1:0","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"何时适合使用smolagents? 您需要一个轻量级且最小的解决方案。 您希望快速进行实验而无需进行复杂的配置。 您的应用程序逻辑很简单。 以上的情况适合使用smolagents。 ","date":"171719-19-30","objectID":"/agent-smolagents/:2:0","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"smolagents中的模型集成 smolagents 支持灵活的 LLM 集成，允许您使用任何符合特定条件的可调用模型。该框架提供了几个预定义的类来简化模型连接： TransformersModel： 实现本地 transformers 管道，实现无缝集成。 from smolagents import TransformersModel model = TransformersModel(model_id=\"HuggingFaceTB/SmolLM-135M-Instruct\") print(model([{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Ok!\"}]}], stop_sequences=[\"great\"])) InferenceClientModel ： 支持通过 Hugging Face 的基础设施或通过越来越多的第三方推理提供商进行无服务器推理调用。 HfApiModel 封装了 huggingface_hub 的 InferenceClient ，用于执行 LLM。它支持 Hub 上所有可用的推理提供程序 ：Cerebras、Cohere、Fal、Fireworks、HF-Inference、Hyperbolic、Nebius、Novita、Replicate、SambaNova、Together 等。 from smolagents import InferenceClientModel message = [ {\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, how are you?\"}]} ] model = InferenceClientModel(provider = \"novita\") print(model(messages)) LiteLLMModel ： 利用 LiteLLM 实现轻量级模型交互。 from solagents import LiteLLMModel messages = [ {\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, how are you?\"}]} ] model = LiteLLMModel(model_id=\"anthropic/claude-3-5-sonnet-latest\", temperature=0.2, max_tokens=10) print(model(messages)) OpenAIServerModel ： 连接到任何提供 OpenAI API 接口的服务。 import os from smolagents import OpenAIServerModel model = OpenAIServerModel( model_id = \"gpt-4o\", api_base = \"https://api.openai.com/v1\", api_key = os.environ[\"OPENAI_API_KEY\"], ) AzureOpenAIServerModel ： 支持与任何 Azure OpenAI 部署集成。 import os from smolagents import AzureOpenAIServerModel model = AzureOpenAIServerModel( model_id = os.environ.get(\"AZURE_OPENAI_MODEL\"), azure_endpoint=os.environ.get(\"AZURE_OPENAI_ENDPOINT\"), api_key=os.environ.get(\"AZURE_OPENAI_API_KEY\"), api_version=os.environ.get(\"OPENAI_API_VERSION\") ) Agent类型 ","date":"171719-19-30","objectID":"/agent-smolagents/:3:0","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"CodeAgents 使用代码而不是 JSON 编写操作有几个主要优势： 可组合性 ：轻松组合和重用操作 对象管理 ：直接处理图像等复杂结构 通用性 ：表达任何计算上可能的任务 这对 LLM 来说很自然 ：LLM 训练数据中已经存在高质量的代码。 它是核心构建块。CodeAgent 是一种特殊的 MultiStepAgent ， CodeAgent 将在下面的示例中看到。 ","date":"171719-19-30","objectID":"/agent-smolagents/:4:0","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"CodeAgent逻辑流程 CodeAgent 通过一系列步骤执行操作，将现有变量和知识纳入代理的上下文中，并保存在执行日志中： 系统提示存储在 SystemPromptStep 中，用户查询记录在 TaskStep 中。 然后，执行以下 while 循环： agent.write_memory_to_messages() 将代理的日志写入 LLM 可读的chat messages中。 这些消息被发送到一个 Model ，该模型生成一个完成信息。 解析完成以提取操作，在我们的例子中，它应该是一个代码片段，因为我们正在使用 CodeAgent 。 动作执行。 将结果记录到 ActionStep 的内存中。 在每个步骤结束时，如果agent包含任何函数调用（在 agent.step_callback 中），则会执行它们。 ","date":"171719-19-30","objectID":"/agent-smolagents/:4:1","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"实践时间！ 以下我会展示两个示例，一个是huggingface 官方课程的例子，一个是自己设计的旅游助手。 派对管家 Alfred要为Wayen家族筹办一场派对。需要做到以下几点： 选择派对上的音乐 为访客整理菜单 计算准备时间 在社区共享 使用 OpenTelemetry 和 Langfuse 📡 检查我们的派对管家 旅游助手 ","date":"171719-19-30","objectID":"/agent-smolagents/:4:2","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"ToolCallingAgents ","date":"171719-19-30","objectID":"/agent-smolagents/:4:3","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"Tools ","date":"171719-19-30","objectID":"/agent-smolagents/:4:4","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"让我们来实现一些Agents吧 ","date":"171719-19-30","objectID":"/agent-smolagents/:5:0","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"Retrieval Agents ","date":"171719-19-30","objectID":"/agent-smolagents/:5:1","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"Multi-Agent System ","date":"171719-19-30","objectID":"/agent-smolagents/:5:2","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Agent"],"content":"Vision and Browser agents ","date":"171719-19-30","objectID":"/agent-smolagents/:5:3","tags":["Agent","Smolagents"],"title":"Smolagents - Introduction","uri":"/agent-smolagents/"},{"categories":["Application"],"content":"在当今飞速发展的技术浪潮中，人工智能（AI）正以前所未有的速度渗透到各个领域，软件开发亦不例外。从智能代码补全到自动化测试，AI 工具的出现极大地提升了开发效率，并逐渐改变了开发者们的工作方式。特别是在前端开发领域，AI 的应用潜力更是巨大，它有望简化繁琐的UI构建过程，让开发者能够更专注于业务逻辑和用户体验。 正是在这样的背景下，Vercel 推出了 v0.dev，一个开创性的 AI 驱动的用户界面生成系统。v0.dev 的核心理念在于，通过简单的文本描述，即可快速生成高质量、可复用的前端 UI 代码，极大地加速了原型设计和开发迭代的进程。 本文旨在分享我对 v0.dev 的实际体验和深入探索。我将结合自己创建前端项目的经历，详细阐述 v0.dev 如何助力我从零开始构建项目，并展示其在实际应用中的强大能力和独特魅力。 ","date":"313144-44-30","objectID":"/application-v0/:0:0","tags":["Application","v0"],"title":"v0.dev：AI 驱动前端开发的探索与实践","uri":"/application-v0/"},{"categories":["Application"],"content":"深入了解 v0.dev v0.dev 是由知名前端工具和平台提供商 Vercel 推出的一款创新性 AI 产品。它不仅仅是一个代码生成器，更是一个能够将自然语言描述转化为实际用户界面的智能系统。v0.dev 的核心在于其强大的 AI 模型，能够理解开发者的意图，并快速生成基于 React、shadcn/ui 和 Tailwind CSS 的高质量、可复用前端代码。这意味着开发者可以通过简单的文本提示，例如\"创建一个带有搜索框和筛选功能的电商产品列表\"，v0.dev 就能立即呈现出相应的 UI 结构和样式。Community里面也有很多优秀作品，包括：APPs, Games, Sites, Components, Blocks, Starters。下图是Crypto Dashboard Site示例。 v0.dev 的工作流程直观且高效。用户只需在输入框中键入对所需 UI 的描述，AI 模型便会迅速处理这些信息。一旦选择了合适的 UI，用户不仅可以直接复制其生成的代码，还可以对 UI 的特定部分进行进一步的精细调整。这种迭代和优化的能力，让 v0.dev 不仅能够快速生成初始代码，还能确保最终产出符合高质量标准。 v0.dev 的出现为前端开发带来了多重显著优势： 首先，它极大地提高了开发效率。传统的前端开发流程中，UI 的构建往往耗时耗力，需要开发者手动编写大量的 HTML、CSS 和 JavaScript 代码。而 v0.dev 通过自动化生成，将这一过程缩短至几秒钟，使得开发者可以将更多精力投入到核心业务逻辑的实现上。 其次，v0.dev 降低了前端开发的门槛。即使是不具备深厚前端背景的设计师或后端开发者，也能通过简单的文本描述快速创建出功能完备的 UI，从而加速了团队协作和项目推进。 最后，v0.dev 是一个快速原型设计的利器。在项目初期，产品经理和设计师可以利用 v0.dev 迅速生成多种 UI 方案，进行快速验证和迭代，有效缩短了产品从概念到落地的周期。 尽管 v0.dev 带来了诸多便利，但在其 Beta 阶段，也存在一些值得注意的局限性。目前，v0.dev 主要专注于前端 UI 代码的生成，对于更复杂的业务逻辑、数据绑定或后端交互等功能，仍需要开发者手动完成。然而，Vercel 已经明确表示，未来将逐步增加对其他 UI 库（如 Svelte, Vue 或纯 HTML）的支持，并探索集成数据获取代码生成的能力。随着 v0.dev 的不断发展和完善，我们有理由相信它将在前端开发领域扮演越来越重要的角色。 ","date":"313144-44-30","objectID":"/application-v0/:1:0","tags":["Application","v0"],"title":"v0.dev：AI 驱动前端开发的探索与实践","uri":"/application-v0/"},{"categories":["Application"],"content":"我的前端项目创建经历 项目背景与需求：我需要做一个网站展示市面上大模型的某种能力的对比结果，风格活泼自然。尽可能用多种不同的方式呈现结果，并且支持选择对比功能。 如何输入提示词: v0支持图片理解，在素材网上找两张你喜欢的风格以及示例网站参考图，描述你想要的网站功能和布局。这里提供两个网站：promptcoder，可以将心仪的网站截图转化为专业的prompt；https://dribbble.com, 可以找到很多好看的网站原型，然后截图给v0，让它分析相关的风格和组件，如下图。 如何生成UI: 输入提示词后，点击生成按钮，等待生成完成。 v0.dev 生成的 UI 示例 不断调整风格、添加组件内容直至你满意为止。 部署到vercel 项目成果展示 ","date":"313144-44-30","objectID":"/application-v0/:2:0","tags":["Application","v0"],"title":"v0.dev：AI 驱动前端开发的探索与实践","uri":"/application-v0/"},{"categories":[],"content":"听了Tako的推荐，决定读一读这本书。果然带给我极大的收获。可以这么说，这本书一定程度上修正了我的世界观和价值观，重塑了我对待事物的态度。花了五个半小时读完中了中译版，我想再过一段时间经历更多的事情之后，我会再读一遍英文原版，看看是否会有观念的变化。 ","date":"313140-40-110","objectID":"/reading-factfulness/:0:0","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"故事的开始 故事的一开始，让我们从十三个关于事实的问题开始（注意到这本书是2019年出版的，这是基于2019年的事实，但是对结果的影响很小），写下你的答案： 在全世界所有的低收入国家里面，有多少百分比的女孩能够上完小学？ □ A.20% □ B.40% □ C.60% 全世界最多的人口生活在什么样的国家？ □ A．低收入国家 □ B．中等收入国家 □ C．高收入国家 在过去的20年里，全世界生活在极度贫困状态下的人口是如何变化的？ □ A．几乎翻倍 □ B．保持不变 □ C．几乎减半 全世界人口的预期寿命现在是多少岁？ □ A.50岁 □ B.60岁 □ C.70岁 今天全世界有20亿儿童，他们的年龄从0到15岁，那么根据联合国的预测，到2100年，全世界会有多少儿童？ □ A.40亿 □ B.30亿 □ C.20亿 联合国预测，到2100年，世界人口将增加40亿，那么请问主要原因是什么？ □ A．将会有更多的儿童（15岁以下） □ B．将会有更多的成年人（15到74岁） □ C．将会有更多的老年人（75岁以上） 在过去的100年间，死于自然灾害的人数是如何变化的？ □ A．几乎翻倍 □ B．保持不变 □ C．几乎减半 当今世界上的人口数量接近70亿，下面哪张地图最佳地表示了人口的分布情况？每一个人形图案代表了10亿人。 现在全世界有多少一岁儿童接种过疫苗？ □ A.20% □ B.50% □ C.80% 在全世界范围内，30岁的男人平均接受教育的时间超过10年。请问30岁的女性，平均在学校接受教育的时间是多少年？ □ A.9年 □ B.6年 □ C.3年 在1996年，老虎、大熊猫和黑犀牛被列为濒危动物，那么请问到今天这三种动物中的哪些还是濒危动物？ □ A．全部都是 □ B．其中的一种 □ C．全部都不是 全世界有多少人能够使用电？ □ A.20% □ B.50% □ C.80% 全球气候专家预测，在接下来的100年中，全球的平均温度将______________。 □ A．升高 □ B．保持不变 □ C．降低 在公布正确答案之前，我翻出当时的答案：A A A C C C C C B C B C A， 38%的正确率。读完这本书之后，再回顾这些回答，感觉当时的我像珊瑚礁在潜意识里缓慢钙化，我以为自己在海水中自由游弋，却早已被亿万枚贝壳包裹成孤岛；像被倒扣的玻璃钟罩住，听见的风声是失真的，看见的阳光带着棱镜的折射，我却以为是真实的世界。这也是作者们创立Gapminder的目的所在，消除全球误解。 正确的答案是C B C C C B C A C A C C A！ 当我发现我大错特错的时候，极度的震撼带来极致的好奇，特别是这段话的出现貌似绝大多数人对这个世界的理解都是错误的。并且不仅仅是错误，而是系统性的错误。人类的答案却是毫无例外地偏向一个方向。相对于事实，每组人群都普遍相信这个世界是更加可怕、更加暴力，而且更加没有希望的。简单来说，人们想象中的世界比真实的世界更加夸张。这是为什么？如果是随机的分布，倒显得正常，偏向性的回答预示了一个根源性的回答：我们情绪化的本能和过分情绪化的世界观！ 作者用整整一本书的经历和数据阐述了各个方面的错误认知，读着读着时常有‘啊，是的，我有这样子想过，原来根本原因是这个，原来应该这样子思考’的想法。自诩接受过高等教育，却发现很多时候的思考是由本能占据的，简单粗暴地直接归因，那些看似成熟的归因，本质是大脑为节省能量的 “认知吝啬”，逐年的积累导致看待世界出现了偏差。那么怎么解决这个问题呢？实事求是！ ","date":"313140-40-110","objectID":"/reading-factfulness/:1:0","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"实事求是！ 我想这四个字在中国人心中应该是再熟悉不过了，但是当我阅读书中的事件时，常常发现我却没有贯彻它。我会把作者关于实事求是的部分节选出来，作为日后复习的提醒。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:0","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"一分为二 人们似乎总是喜欢把事物一分为二为两个类别，而这两个类别又是互相对立、互相矛盾的，并且这两个类别之间存在着一道巨大的鸿沟。我们也会探讨，正是这种一分为二的本能，促使我们把世界和人群都分成两个不同的类别：富有的和贫穷的。 我的学生谈论“他们”和“我们”​，其他人经常谈论“发展中国家”和“发达国家”​。你通常也会使用各种类似的标签，那么这有什么问题呢？记者、政治家、社会活动家、教师和学者，都习惯于使用这些标签。当人们说“发展中国家”和“发达国家”​，他们通常真正想表达的意思是，​“贫穷的国家”和“富裕的国家”​。 在当今的世界，更多的人生活在中间地带，不再有一道鸿沟能够简单地划分西方国家与其他国家、发达国家和发展中国家、富国和穷国。所以我们不应当再继续使用那些一分为二的简单标签了。 人生活在中间地带，不再有一道鸿沟能够简单地划分西方国家与其他国家、发达国家和发展中国家、富国和穷国。所以我们不应当再继续使用那些一分为二的简单标签了。 要想有效地控制我们一分为二的错误本能，我们就要坚持寻找绝大多数。 我们要注意只比较平均数的做法。平均数之外，我们还要注意数据的实际分布。如果两组数据的分布出现了重叠，那么有可能两组之间的鸿沟并不存在。 我们要注意只比较极端情况的做法。在所有的群体、国家或者国民中，总会有极端情况的存在，总会有顶层和底层。而顶层和底层之间的差别，有时候是极端不公平的。即便如此，大多数仍然分布在中间状态，而在中间并不存在鸿沟。 我们要注意只俯视不仰视的做法。记住俯视会带来错觉，一切看起来都一样矮，但是事实并非如此。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:1","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"负面思维 世界正在变得更坏，是一个重大的误解。 我们对坏事总会比好事更加关注。这种负面思维的本能就是我们重大误解背后的第二个原因。我们总是很容易就可以注意到世界上发生的所有坏事情，而非常难以发现好事情正在发生。数以10亿次的进步和提高都得不到报道。请不要误解我的意思，我不是说应该用那些微不足道的正面消息来平衡那些负面消息。我指的是那些改变世界的根本性进步。然而这些进步都是以很缓慢、很分散、聚沙成塔、积少成多的方式发生的，所以并不太具备新闻价值。而这些无声无息发生着的人类的进步，成就了人类的奇迹。 20年前你多大？请闭上你的双眼几秒，然后回忆一下20年前的自己，这20年间，你自己的世界变化了多少？是很多还是很少？在过去的20年间，这个世界变化很大。20年前，这个世界上29%的人口仍然生活在极度贫困状态中，而现在这个数字是9%。然而我们却很悲观。我们这些生活在第四级的人，仍然不停地在电视上看到极度贫困的人们，似乎一切都没有改变。 我们不应当无视当今世界上仍然在发生的各种悲剧，但是回顾历史，我们也应该清晰地认识到，这个世界正在变得越来越透明，困难的地区也越来越容易得到帮助。事实上，几乎所有的国家都经历了全方位的进步。 之所以大多数人会认为这个世界正在变得更坏，很大程度上是因为我们的负面思维的本能。这种负面思维的本能体现在三个方面：第一，我们对过去错误的记忆；第二，媒体和社会活动家对于负面新闻的选择性报道；第三，我们总是觉得，只要有坏的事情发生，就不应该认为世界是在变好。 事情，可以是不好的，但同时也在变得更好。不好和更好可以是同时存在的。另外一种可以帮助我们控制负面思维的方法就是对坏消息有思想准备。不要过分美化历史。要做到实事求是，我们就要做到在听到负面消息时能够认识到我们原本就更容易获得负面新闻，而很难听到关于事情在进步的消息。这种现实情况，使得我们系统性地对世界产生了负面的印象，从而产生了焦虑。 要想控制我们的负面情绪，我们就要做到对坏消息要有思想准备。 更好和不好。我们要学会区分状态和趋势，要认识到事情可以同时是不好的，但也是在变得更好的。 好消息不是新闻。好消息是很少得到报道的，因此我们总是听到坏消息。所以当你听到坏消息的时候，可以问一下自己是否我们没有听到好的消息。 循序渐进的进步不是新闻。当一件事情在持续变好，但当中产生了一些小的低谷的时候，通常你只会注意到低谷，而不是整体的趋势。 更多的坏消息并不意味着更多的坏事情。我们能够听到更多的坏消息，有时仅仅是因为我们对坏事情的关注度和监控能力提高了，并不意味着这个世界在变得更坏。 警惕过分美化的历史。人们经常会刻意地美化自己的历史，而国家也经常会刻意地美化自己的历史。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:2","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"直线思维 我们都有一种直线思维的本能，这种本能使得我们假设，所有的事情都是按照直线的规律来发展的。 在1948年，当我出生的时候，平均每位妇女的生育数量是5个孩子。但是到1965年之后，这个数字快速下降。在过去的50年间，这个数字大幅度下降到了现在的世界平均水平，平均每位妇女生育2.5个孩子。 在几十亿人口脱离贫困的过程中，他们决定生育更少的孩子。他们不需要那么多孩子来作为儿童劳动力在家庭农场工作，他们也不再需要生那么多孩子来对冲儿童夭折的风险。 为什么人口停止增长？未来人口的增长并不是由于更多的新生儿童，也不是因为人类寿命的延长。而是由于今天的儿童成长为成年人，在上面的图表中，​“填充”成为新增的30亿成年人。这种“填充效应”就会在下面的45年中发生，并且在45年之后停止。我们已经达到了新的平衡：每一代人养育的儿童数量不再增长了。 一旦人们不再需要儿童作为劳动力，一旦妇女们得到了更好的教育并且人们获得了避孕的手段，无论他们的文化背景和宗教信仰有怎样的不同，他们都会毫无例外地选择生育更少的孩子，并且让孩子得到更好的教育。 当我们讨论儿童死亡率的问题的时候，我们不需要在未来和现在之间、在理智和良心之间做出选择。因为本质是一样的，只要我们降低儿童的死亡率，我们就能使全人类受益，使今天和未来的人们全都受益。 如何控制直线思维？控制直线思维本能的最佳方式，就是每当我们看到一条直线的时候，我们就应当想到事物的演变有多种方式，不一定是按照直线发展的。并且我们要记得，直线发展的事物在现实中是很少见的。 不要做直线假设。有很多事物的发展并不遵循直线规律，而是遵循S形曲线、滑梯曲线、驼峰曲线或者倍增曲线的规律。没有一个孩子是按照直线的规律长高的，而且也没有父母会认为孩子的身高会无限增长。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:3","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"恐惧本能 1975 年 10 月 7 日午餐时间，作为瑞典海边小县城急诊室助理医师工作第五天的作者，在资深医师都去吃午餐时，独自面对一架坠毁飞机送来的受伤飞行员。因飞行员穿着特殊连体服，作者找不到拉链开口，又见地板有 “血迹”，听到疑似俄语的话语，误以为是苏联空军飞行员，以为第三次世界大战爆发。后来护士长回来解释，那是瑞典空军飞行员，“血迹” 是被踩的救生颜料，飞行员因在冷海浸泡而发抖抽筋。理性思考永远是困难的，尤其当我们恐惧的时候。当我们的思想被恐惧填满的时候，我们的大脑就没有空间来思索事实了。 我们可以想象在外部世界和我们的大脑之间，有一张护盾，或者一种注意力过滤器。这种过滤器可以保护我们免受外界噪声的干扰。然后让我们想象这个过滤器上面有十个洞，对应十种本能，一分为二、负面思维、直线思维等等。绝大多数信息都不能通过这个过滤器，但是这十个洞会允许那些符合我们十种基本本能的信息通过，而忽略掉那些不符合这些本能的信息。所有的媒体才不会浪费时间去编造那些不符合我们基本本能的故事。**由于我们情绪化的思维本能，以及媒体必须利用我们的情绪化本能来捕获我们的注意力，我们一直拥有一种过度情绪化的世界观。在所有情绪化的本能中，恐惧本能最能影响媒体对于传递给大众的新闻的选择。**然而这里出现了一个悖论：当现实世界变得前所未有的和平和安全的时候，我们看到的却是铺天盖地的关于各种危险的报道。 在正常的情况下，恐惧本能对我们人类是有用的。但是恐惧本能往往对于我们理解这个世界起到反面作用。它误导我们的注意力去关注那些我们最害怕的事情，而不是那些真正危险的事情。本章介绍了一些可怕的事件：自然灾害（1‰的致死原因）​、飞机坠毁（1/10万的致死原因）​、谋杀（7‰的致死原因）​、核泄漏（0%致死原因）和恐怖主义（5‱的致死原因）​。所有这些无一能够构成百分之一的致死原因，然而它们却得到了媒体的大量关注。当然我们应当致力于减少这些死亡的案例。但是我们也必须清醒地认识到，恐惧本能在多大程度上扭曲了我们的关注点。要想理解真正的生命威胁所在，并且有效地保护我们的家人，我们应该克制自己的恐惧本能，并实实在在地分析死亡原因。 因为恐惧和危险是两个不同概念。可怕的事情，仅仅给了我们一种危险的感觉，但是另外一些真正危险的事情则会威胁我们的生命。过度关注可怕的而不是危险的事情，就意味着我们把自己宝贵的注意力放在了错误的方向。恐惧曾经使得我在本应该给飞行员治疗低温综合征的时候误以为第三次世界大战爆发了，也使得人们在本应当关注正在荒漠化的海床和数百万人死于痢疾的时候，却去关注地震、飞机坠毁以及化学物质污染。我希望我的恐惧能够集中在今天真正的威胁上，而不是我们在进化过程中形成的本能。 要做到实事求是，就是当我们感到恐惧的时候，我们能够认识到我们害怕的事情不一定是真正危险的。我们对于暴力、受困以及污染的天然恐惧，会使我们习惯性地过度高估这些风险。的。我们对于暴力、受困以及污染的天然恐惧，会使我们习惯性地过度高估这些风险。 可怕的世界：恐惧vs．现实。我们感受到的世界，比真实的世界更可怕，这是因为我们注意到的信息都是被媒体精心选择过滤过的，而媒体刻意选择那些吓人的信息来吸引我们的注意力。 风险=危险程度×发生的可能性。你面临的真实风险，并不取决于它看起来多么吓人，而在于两个因素：危险的程度和发生的概率。 在采取行动之前，先让自己冷静下来。当你在恐惧中的时候，你会看到一个完全不同的世界。所以不要在恐惧中做决定。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:4","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"规模错觉 人们总是容易注意局部而忽略整体。这是我们的本能之一。我们总是会注意到一个单一的数字而误判它的重要性。正如在纳卡拉的医院中发生的一样，我们总是对单一事件或者看得见的受害者的重要性产生误判。这两者是规模错觉的最重要的两个方面。 规模错觉的两个方面和负面思维的本能结合在一起，使得我们系统性地低估了这个世界发生的进步。媒体和慈善组织总是习惯于宣传一些看起来很大的数字，并且给我们看一些受苦难的人的照片，使得我们在印象中系统性地低估了真正的比例和世界上发生的进步。 数据表明，在全世界范围内，几乎一半以上的儿童生存率的提高是来自母亲获得了读书和写字的能力。今天更多的儿童能够生存下来，是因为预防性的措施使他们更少得病。受过培训的乡村医生可以给怀孕的母亲们照顾和接生。乡村护士们帮助他们做好免疫工作。父母们可以让儿童吃得饱、穿得暖。周围的人有良好的洗手的卫生习惯。母亲们可以读得懂药瓶上的使用说明。所以当你要投资来提高收入水平在第一级和第二级的人们的健康水平的话，你应该把你有限的资金投入小学、护士教育和疫苗注射上面，而不是急于建造宏伟的医院。 要想控制规模错觉，我们就要关注比例： 对比。大的数字总是看起来很大，而单一数字很容易误导我们。当我们看到一个单一数字的时候，一定要记得做对比，或者做除法，得到某种比例。 二八原则。如果你得到了一个长长的清单，就应该先排序，然后找到最大的几项并且做深入分析。通常这几项的重要性要远大于其他所有项目加在一起的重要性。 比例。数字和比例有可能代表着完全不同的含义。尤其当我们在不同大小的组别之间做对比的时候，比例总是更有意义。具体来讲，我们在对国家和地区进行比较的时候，应该更加关注人均数字。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:5","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"以偏概全 每个人都会在头脑中自动地进行演绎和归纳。这是下意识的行为，这也不涉及偏见或者受教育程度。 归纳法有时候会使我们错误地把非常不同的人、事物或者国家划分到同一个组，而忽视它们的不同。我们会自动假设我们归到一类的事物是非常相似的。这样我们就经常会犯以偏概全的错误，以我们看到的很少数的非正常案例来给整个群体下结论。 在这个方面，媒体再一次充当了这种本能的朋友。误导性的以偏概全，以及极端典型，都是媒体善用的手段，因为这样他们可以很轻松、很快速地沟通。错误的归纳分类就会导致我们脑海中形成错误典型。 一分为二的本能促使我们把世界分为“我们”和“他们”​，而以偏概全的本能使得“我们”认为“他们”是完全一样的。 要做到实事求是，就是要意识到当我们讨论一个群体的时候，我们的分类可能是错误的。要想控制住我们的以偏概全的本能，我们要经常质疑自己的分类方法。 在同一类别中寻找不同。特别是当一个类别非常巨大的时候，我们应该试图找到有效的办法来将其分得更小、更准确。 在不同类别中寻找相同。如果你发现不同的类别之间存在着巨大的相似性，那么要考虑，你的分类方法有可能是不正确的。 在不同类别中寻找不同。不要假设在一个类别中适用的规则可以在其他类别中同样适用。比如收入水平第四级的人不要假设其他级别的人也适用同样的生活规则。再比如失去意识的士兵和沉睡中的婴儿是不同的。 注意大多数。大多数仅仅意味着超过一半，我们应当具体区分，大多数究竟意味着51%还是99%。 注意极端案例。活灵活现的图片往往会给我们留下深刻的印象，但是它们有可能只代表着极端案例，而不是普遍现象。 不要假设别人是傻瓜。当你发现一些奇怪现象的时候，请保持好奇心和谦卑之心，去探究这现象背后的道理。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:6","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"命中注定 所谓命中注定本能，就是我们认为一些事物内在的属性将决定其命运，无论是人民、国家、宗教还是文化。这种思想认为所有的落后都是他们的内在本质造成的，而这一点是永远不会改变的。同时为你所处的特定群体宣称一种所谓的命运，也将有利于将这个群体团结在一起，并且产生一种优越感。所以这种命中注定的本能对于强权部落和独裁统治都是很重要的。 社会和文化并不像岩石一样不可改变。它们是在持续变化中的。在非洲五个最大的国家，突尼斯、阿尔及利亚、摩洛哥、利比亚和埃及，当我小的时候，人们普遍认为这些国家是典型的非洲国家。当这几个国家获得了巨大的进步之后，它们却成了非洲国家的例外，而不再被认为是典型的非洲国家了。 我认为，最后脱离贫困的人将是那些生活在偏远、极其贫瘠的土地上，同时又受到战争困扰的农民。他们想要脱贫，当然会面临非常大的困难，但并不是因为他们无法改变的文化，而是因为土壤和战争。 要做到实事求是，就是要认识到很多事情（比如人民、国家、宗教和文化）看起来似乎保持不变，仅仅是因为改变发生得非常缓慢，并且要记住聚沙成塔。要想控制命中注定的本能，就要记住缓慢的改变也仍然是改变。 注意追踪持续的提高。每年小的改变可以在几十年后积累成巨大的改变。 更新你的知识。有些知识很快就会变得过时，技术、国家、社会文化和宗教都在持续的改变当中。 与老年人对话。如果你想弄清楚价值观是如何改变的，请想一想你的祖父母们的价值观和你的价值观有什么不同。 收集文化改变的案例。找到反面的案例来挑战那种认为文化一成不变的说法。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:7","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"单一视角 我们非常喜欢简单的想法。我们欣赏洞见真相的时刻。我们也享受真正理解到真相的喜悦。当我们拥有了一个简单的想法，并且发现它可以解释很多事情的时候，我们会非常开心，觉得这个世界变得简单了。要多和拥有不同意见的人交流，把这些不同意见看作帮助你真正理解这个世界的有用的资源，而不是仅仅和那些和你有共同观点的人一起交流。 为什么人们总是习惯于用单一视角去理解这个世界呢？我发现了两个主要的原因：其一是政治的意识形态；其二是专业局限性。 我喜欢专家，但是他们都有自己的局限性。首先非常明显的是，专家们都只对自己熟悉的特定领域拥有专业知识，尽管他们往往不承认这一点。几乎我遇到的所有社会活动家，都会有意或无意地夸大他们所致力于解决的问题。致力于保护濒危动物以及动物栖息地的社会活动家，总是会犯我刚刚描述过的那种错误：他们拼命地想让人们关注这些濒危动物，而他们自己却忘记了发生的进步。 人们知道了所取得的进步，就会受到很大的激励，而反复地强调问题的存在，却不会给人们带来任何激励。 你也许听过这样一句谚语：你给你的孩子一把锤子，他就会把所有的东西都看作钉子。知识有时候会成为专家的障碍，使他们看不到真正的解决方案。所有的解决方案，对于解决特定的问题都是很管用的，但是没有任何一种方案可以解决所有的问题。最好的方法就是以多视角来观察这个世界。 数据是有它自己的局限性的。仅仅在数据能够帮助我理解数字背后的现实的时候，我才会喜欢使用数据。莫桑比克的总理都是帕斯库亚尔·莫昆比，他回答说：​“我会看这些数据，但是这些数据并不是太准确，所以我自己会观察每年5月1日参加游行的人。这个游行是我们国家的传统。我就观察这些参加游行的人的脚，看他们穿什么样的鞋。 要想控制单一视角的本能，必须有一个工具箱，而不仅仅是一把锤子。 检查你的想法。不要仅仅专注于那些能够证明你的想法的正确案例，而要多与那些持有不同意见的人讨论。发现自己想法的不足之处。 有限的经验。不要认为你在自己的专业领域之外有什么真知灼见。对自己未知的领域要保持谦逊。同时也要注意到专家也有他们的局限性。 锤子和钉子。当你会熟练地使用某一种工具的时候，你总会尽可能多地使用它。等你花了太多的时间专注于分析某一个问题的时候，有可能会夸大这个问题以及解决方案的重要性。请牢记，没有任何一个工具是万能的。如果你总是习惯于使用锤子的话，那么请多和那些习惯使用改锥、扳手和卷尺的人打交道。多听听来自不同领域的人的意见。 关注数字，但不仅仅关注数字。没有数字，我们无法理解世界，但是仅有数字，我们仍然无法理解世界。请专注于发现数字背后的真实世界。 当心简单的想法和简单的解决方案。人类历史上从来就不缺乏充满了乌托邦式的简单想法的空想家，而最终他们都带来了可怕的结果。我们应当认识到事物的复杂性，学会兼收并蓄以及妥协。我们应当在具体情况具体分析的基础上来解决问题。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:8","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"归咎他人 当坏事情发生的时候，人们总是试图找到一个清晰而简单的理由去责怪其他人，这就是我们所说的归咎于人的本能。 当有坏事情发生的时候，我们似乎总是很自然想到，一定是有其他人故意做坏事。我们总是倾向于相信有人利用权力或者手段，才能够使得事情发生，否则的话，这个世界就会让人感到不可预测、令人困惑和非常可怕。当我们的注意力集中在思考究竟该揍谁的时候，我们就会停止思考问题产生的真正原因。这就大大地降低了我们真正解决问题或者预防问题的能力。对世界上的绝大多数问题而言，我们不能停止于找到替罪羊，而应该观察理解产生问题的整个系统。 对他人的指责往往能够揭示我们自己的思维模式。当我们在寻找替罪羊的时候，其实反映的是我们内心早已存在的思维模式。 与其简单地指责记者不说实话，我们还不如仔细地反思一下，为什么媒体一定要给我们反映一个扭曲的世界？是记者们刻意为之吗？还是有其他更深层次的原因？因为我们并不是刚刚开始对世界产生错误的认识，而是一直以来我们对世界的认识都是错误的。​ 要做到实事求是，就是当人们开始找替罪羊的时候，你应该认识到这是错误的，并且能够记起，简单地归咎他人只会使你把握不住问题的真正要点，并且无法集中注意力防止类似事件再次发生。要想控制归咎他人的本能，你应该停止寻找替罪羊。 寻找原因，而不是寻找坏人。当坏事情发生的时候不要试图去责怪任何个人或群体。首先接受没有人刻意为之这个事实。然后努力去理解这一事情发生背后的系统性原因。 寻找系统，而不是寻找英雄。当有人号称自己做了什么伟大的业绩的时候，问问自己，如果没有这个人，是否这件事情仍然可以发生？通常是整个系统的有效运行使得好的事情发生了。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:9","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"情急生乱 当我们陷入恐惧中，并且在紧迫的时间压力下，我们就会过分地思考最坏情景，于是做出非常愚蠢的决定。在事出紧急的压力下，我们的分析能力就会丧失。 请放轻松，这永远都不是真的，事情永远都没有那么紧急，而且事情永远不是非黑即白的选择。情急生乱的本能会驱使我们做出错误的决定。它使得我们感到很大的压力，放大了我们的其他本能，并且阻止了我们分析思考，使得我们仓促地做出决定，在没有深思熟虑的情况下贸然采取行动。 我们天天喊狼来了，结果就是最终人们变得麻木而再不相信这些警报。我们都清楚那个故事的结尾，最终狼真的来了的时候没有人快速地反应，结果所有的羊都被吃光了。 要想控制情急生乱的本能，你需要做到循序渐进。 深呼吸。当你情急生乱的本能被唤醒的时候，你的其他本能也会被激活，而你大脑的分析能力则停止工作了。请给你自己一点时间和更多的信息。绝大多数情况下，你并不需要立即采取行动，以后仍然会有机会。事实也通常不是非黑即白的。 坚持了解基础数据。如果一件事是紧急且很重要的，那么我们必须对它进行持续观测。请警惕那些虽然相关但并不准确的数据，或者那些虽然准确但实际并不相关的数据。只有相关且准确的数据才真正有用。 警惕那些带有偏见的预言家。任何关于未来的预测都是具有不确定性的。所有的预测都必须考虑到未来的不确定性。你应当坚持对预测有一个全面的、包含多种情形分析的了解。永远不要只看最佳或最差情形。并且要用这种预测和历史上发生的事实相对比，来检查这种预测方法的准确度。 小心过激的行动。尽可能了解激烈行动的后果和副作用。了解这一行动的理论依据。应当稳扎稳打地取得现实的进步，并且在过程中持续观测实施效果。通常循序渐进的方案，总会优于大刀阔斧的行动。 ","date":"313140-40-110","objectID":"/reading-factfulness/:2:10","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":[],"content":"致敬汉斯·罗斯林：用数据点亮真相的行者 他以动态气泡图打破“世界崩塌”的迷思，用数据证明全球贫困率下降超50%的进步轨迹；作为无国界医生，在非洲疫区用流行病学调查连接生命与希望；即便身患癌症，仍在化疗期间整理非洲农村电力数据，将《事实》写成对抗认知偏见的宣言。 汉斯·罗斯林用实证精神解构绝望，以国际视野超越文明对立——当他的气泡图在TED舞台绽放，世人终于看见：真相不在非黑即白的叙事里，而在每个被认真丈量的事实中。他留下的，是用理性守护希望的生命范本。直到生命的终点，他仍然保持着对世界的好奇和热情。他勇敢，有创意，严肃认真，永远相信奇迹。 同时致谢安娜·罗斯林·罗朗德，欧拉·罗斯林，献给所有为这本书做贡献的人们，感谢你们写出了如此震撼人心的作品。 ","date":"313140-40-110","objectID":"/reading-factfulness/:3:0","tags":[],"title":"Factfulness","uri":"/reading-factfulness/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"60632-32-90","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo. 什么时候需要使用 Hugo extended 版本? 当你需要自定义样式时, 你要使用 Hugo extended 版本来获得正确的渲染效果. Hugo extended 版本 ","date":"60632-32-90","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"60632-32-90","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 发布版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 主题的兼容性 分支或版本 支持的 Hugo 版本 master(不稳定) ≥ 0.128.0 0.3.X(推荐) 0.128.0 - 0.143.1 0.2.X(过时) 0.68.0 - 0.127.0 ","date":"60632-32-90","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意 在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (hugo.toml) 将本主题设置为默认主题. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览 技巧 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender ","date":"60632-32-90","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧 网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多… ","date":"60632-32-90","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 配置 ","date":"60632-32-90","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 hugo.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 版权描述，仅仅用于 SEO copyright = \"\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true # 忽略一些构建错误 ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # 分页配置 [pagination] disableAliases = false pagerSize = 10 path = \"page\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [params] # 网站默认主题样式 [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"我的网站\" # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"这是我的全新 Hugo 网站\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 作者配置 [params.author] name = \"xxxx\" email = \"\" link = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"我的网站\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Yout","date":"60632-32-90","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 自定义样式 Hugo extended 版本是必需的 由于需要将  SCSS 转换为  CSS, Hugo extended 版本对于自定义样式是必需的. 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换 ","date":"60632-32-90","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 繁体中文 zh-tw zh-TW 法语 fr fr 波兰语 pl pl 葡萄牙语(巴西) pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi 阿拉伯语 ar ar 加泰罗尼亚语 ca ca 泰语 th th 泰卢固语 te te 印尼语 id id 土耳其语 tr tr 韩语 ko ko 印地语 hi hi 荷兰语 nl nl ","date":"60632-32-90","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # 设置默认的语言 [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[languages.en.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[languages.en.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" languageCode = \"zh-CN\" languageName = \"简体中文\" hasCJKLanguage = true [[languages.zh-cn.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" [[languages.fr.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" [[languages.fr.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意 请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容. 技巧 也可以使用 文章前置参数 来翻译网址. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"60632-32-90","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"60632-32-90","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"60632-32-90","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎? 以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. 官方提供的 Algolia CLI 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json… ","date":"60632-32-90","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"5055-05-40","objectID":"/theme-documentation-content/","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"5055-05-40","objectID":"/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"1 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! ","date":"5055-05-40","objectID":"/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"2 前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意 不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做. 这是一个前置参数例子: --- title: \"我的第一篇文章\" subtitle: \"\" date: 2020-03-04T15:58:26+08:00 lastmod: 2020-03-04T15:58:26+08:00 draft: true author: \"\" authorLink: \"\" description: \"\" license: \"\" images: [] tags: [] categories: [] featuredImage: \"\" featuredImagePreview: \"\" hiddenFromHomePage: false hiddenFromSearch: false twemoji: false lightgallery: true ruby: true fraction: true fontawesome: true linkToMarkdown: true rssFullText: false toc: enable: true auto: true code: copy: true maxShownLines: 50 math: enable: false # ... mapbox: # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # 位于 \"assets/\" # 或者 # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # 位于 \"assets/\" # 或者 # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... --- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧 featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources: - name: featured-image src: featured-image.jpg - name: featured-image-preview src: featured-image-preview.jpg ","date":"5055-05-40","objectID":"/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"3 内容摘要 LoveIt 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. 文章摘要预览 ","date":"5055-05-40","objectID":"/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"5055-05-40","objectID":"/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意 请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格. ","date":"5055-05-40","objectID":"/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"5055-05-40","objectID":"/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 LoveIt 主题会将你的文章描述作为摘要. ","date":"5055-05-40","objectID":"/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意 不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等. ","date":"5055-05-40","objectID":"/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"5055-05-40","objectID":"/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Markdown 扩展语法 LoveIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"5055-05-40","objectID":"/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"5055-05-40","objectID":"/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"数学公式 LoveIt 基于 $\\KaTeX$ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. $\\KaTeX$ 根据 特定的分隔符 来自动渲染公式. 技巧 有一份 $\\KaTeX$ 中支持的 $\\TeX$ 函数 清单. 注意 由于 Hugo 在渲染 Markdown 文档时会根据 _/*/\u003e\u003e 之类的语法生成 HTML 文档, 并且有些转义字符形式的文本内容 (如 \\(/\\)/\\[/\\]/\\\\) 会自动进行转义处理, 因此需要对这些地方进行额外的转义字符表达来实现自动渲染: _ -\u003e \\_ * -\u003e \\* \u003e\u003e -\u003e \\\u003e\u003e \\( -\u003e \\\\( \\) -\u003e \\\\) \\[ -\u003e \\\\[ \\] -\u003e \\\\] \\\\ -\u003e \\\\\\\\ LoveIt 主题支持 raw shortcode 以避免这些转义字符, 它可以帮助您编写原始数学公式内容. 一个 raw 示例: 行内公式: {{\u003c raw \u003e}}\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\){{\u003c /raw \u003e}} 公式块: {{\u003c raw \u003e}} \\[ a=b+c \\\\ d+e=f \\] {{\u003c /raw \u003e}} 呈现的输出效果如下: 行内公式: 公式块: 行内公式 默认的行内公式分割符有: $ ... $ \\( ... \\) (转义的: \\\\( ... \\\\)) 例如: $c = \\pm\\sqrt{a^2 + b^2}$ 和 \\\\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\\\) 呈现的输出效果如下: $c = \\pm\\sqrt{a^2 + b^2}$ 和 \\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\) 公式块 默认的公式块分割符有: $$ ... $$ \\[ ... \\] (转义的: \\\\[ ... \\\\]) \\begin{equation} ... \\end{equation} (不编号的: \\begin{equation*} ... \\end{equation*}) \\begin{align} ... \\end{align} (不编号的: \\begin{align*} ... \\end{align*}) \\begin{alignat} ... \\end{alignat} (不编号的: \\begin{alignat*} ... \\end{alignat*}) \\begin{gather} ... \\end{gather} (不编号的: \\begin{gather*} ... \\end{gather*}) \\begin{CD} ... \\end{CD} 例如: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}\\_{i}=\\mathbf{E}\\_{1}+\\mathbf{E}\\_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\\\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\\\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\\\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\\\u003e\u003e B \\\\\\\\ @VbVV @AAcA \\\\\\\\ C @= D \\end{CD} 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\u003e\u003e B \\\\ @VbVV @AAcA \\\\ C @= D \\end{CD} 技巧 你可以在 网站配置 中自定义行内公式和公式块的分割符. Copy-tex Copy-tex 是一个 $\\KaTeX$ 的插件. 通过这个扩展, 在选择并复制 $\\KaTeX$ 渲染的公式时, 会将其 $\\LaTeX$ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 $\\LaTeX$ 源代码. mhchem mhchem 是一个 $\\KaTeX$ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"5055-05-40","objectID":"/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"字符注音或者注释 LoveIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"5055-05-40","objectID":"/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"分数 LoveIt 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"5055-05-40","objectID":"/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"5055-05-40","objectID":"/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: {?X} -\u003e X 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: {?:}joy: 呈现的输出效果如下: :joy: 而不是 😂 技巧 这个方法可以间接解决一个还未解决的 Hugo 的 issue. 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"5055-05-40","objectID":"/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure figure 的文档 一个 figure 示例: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} 呈现的输出效果如下: Lighthouse (figure) 输出的 HTML 看起来像这样: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist gist 的文档 一个 gist 示例: {{\u003c gist spf13 7896402 \u003e}} 呈现的输出效果如下: 输出的 HTML 看起来像这样: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight highlight 的文档 一个 highlight 示例: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4 instagram instagram 的文档 Instagram’s API was deprecated since October 24th, 2020 The instagram-shortcode refers an endpoint of Instagram’s API, that’s deprecated since October 24th, 2020. Thus, no images can be fetched from this API endpoint, resulting in an error when the instagram-shortcode is used. For more information please have a look at GitHub issue #7879. ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param param 的文档 一个 param 示例: {{\u003c param description \u003e}} 呈现的输出效果如下: Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref 和 relref ref 和 relref 的文档 ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo vimeo 的文档 一个 vimeo 示例: {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube youtube 的文档 一个 youtube 示例: {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"40459-59-40","objectID":"/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style 注意 Hugo extended 版本对于 style shortcode 是必需的. style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightGallery 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image) ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 admonition shortcode 有以下命名参数: type [可选] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能. 完整文档请查看页面 主题文档 - mermaid Shortcode. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts echarts shortcode 使用 ECharts 库提供数据可视化的功能. 完整文档请查看页面 主题文档 - echarts Shortcode. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能. 完整文档请查看页面 主题文档 - mapbox Shortcode. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器. 完整文档请查看页面 主题文档 - music Shortcode. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 完整文档请查看页面 主题文档 - bilibili Shortcode. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit typeit shortcode 基于 TypeIt 库提供了打字动画. 完整文档请查看页面 主题文档 - typeit Shortcode. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意 脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库. 一个 script 示例: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"12 raw raw shortcode 用来在你的文章中插入原始  HTML 内容. 一个 raw 示例: 行内公式: {{\u003c raw \u003e}}\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\){{\u003c /raw \u003e}} 公式块: {{\u003c raw \u003e}} \\[ a=b+c \\\\ d+e=f \\] {{\u003c /raw \u003e}} 原始的带有 Markdown 语法的内容: {{\u003c raw \u003e}}**Hello**{{\u003c /raw \u003e}} 呈现的输出效果如下: 行内公式: 公式块: 原始的带有 Markdown 语法的内容: ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:12:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"13 person person shortcode 用来在你的文章中以 h-card 的格式插入个人网站链接. person shortcode 有以下命名参数: url [必需] (第一个位置参数) URL of the personal page. name [必需] (第二个位置参数) Name of the person. text [可选] (第三个位置参数) Text to display as hover tooltip of the link. picture [可选] (第四个位置参数) A picture to use as person’s avatar. nick [可选] Nickame of the person. 一个 person 示例: {{\u003c person url=\"https://evgenykuznetsov.org\" name=\"Evgeny Kuznetsov\" nick=\"nekr0z\" text=\"author of this shortcode\" picture=\"https://evgenykuznetsov.org/img/avatar.jpg\" \u003e}} 呈现的输出效果为  Evgeny Kuznetsov (nekr0z). 一个使用通用图标的 person 示例: {{\u003c person \"https://dillonzq.com/\" Dillon \"author of the LoveIt theme\" \u003e}} 呈现的输出效果为  Dillon. ","date":"30359-59-40","objectID":"/theme-documentation-extended-shortcodes/:13:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"10140-40-90","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"10140-40-90","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["documentation"],"content":"mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能.","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":" mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能. mermaid 是一个可以帮助你在文章中绘制图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:4:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:5:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:6:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"实体关系图 一个 实体关系图 mermaid 示例: {{\u003c mermaid \u003e}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:7:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"用户体验旅程图 一个 用户体验旅程图 mermaid 示例: {{\u003c mermaid \u003e}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:8:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:9:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"依赖图 一个 依赖图 mermaid 示例: {{\u003c mermaid \u003e}} requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -\u003e test_req {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"30359-59-30","objectID":"/theme-documentation-mermaid-shortcode/:10:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/theme-documentation-mermaid-shortcode/"},{"categories":["Markdown"],"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"10128-28-50","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"10128-28-50","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"10128-28-50","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"10128-28-50","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"10128-28-50","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"10128-28-50","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"10128-28-50","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"10128-28-50","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"10128-28-50","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"10128-28-50","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"10128-28-50","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"10128-28-50","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹️ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"10128-28-50","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"10128-28-50","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"10128-28-50","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"10128-28-50","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"10128-28-50","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"10128-28-50","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人与身体 ","date":"10128-28-50","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"10128-28-50","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"10128-28-50","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"10128-28-50","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"10128-28-50","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"10128-28-50","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"10128-28-50","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"10128-28-50","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"10128-28-50","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man :person_with_pouting_face: person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁 information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋 raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇 bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"10128-28-50","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮 cop policeman 👮‍♀️ policewoman 🕵️ detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷 construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰‍♀️ bride_with_veil 🤰 pregnant_woman ","date":"10128-28-50","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"10128-28-50","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆 massage massage_woman 💆‍♂️ massage_man 💇 haircut haircut_woman 💇‍♂️ haircut_man 🚶 walking walking_man 🚶‍♀️ walking_woman 🏃 runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯 dancers dancing_women 👯‍♂️ dancing_men ","date":"10128-28-50","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄 surfer surfing_man 🏄‍♀️ surfing_woman 🚣 rowboat rowing_man 🚣‍♀️ rowing_woman 🏊 swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴 bicyclist biking_man 🚴‍♀️ biking_woman 🚵 mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"10128-28-50","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"10128-28-50","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 💑 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👪 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"10128-28-50","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣️ speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"10128-28-50","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"10128-28-50","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"10128-28-50","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊️ dove 🦅 eagle 🦆 duck 🦉 owl ","date":"10128-28-50","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"10128-28-50","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"10128-28-50","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"10128-28-50","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"10128-28-50","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"10128-28-50","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"10128-28-50","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"10128-28-50","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"10128-28-50","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"10128-28-50","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"10128-28-50","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"10128-28-50","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"10128-28-50","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"10128-28-50","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"10128-28-50","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"10128-28-50","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"10128-28-50","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"10128-28-50","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔️ mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping 🏖️ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"10128-28-50","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘️ houses 🏚️ derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"10128-28-50","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"10128-28-50","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"10128-28-50","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍️ motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"10128-28-50","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"10128-28-50","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"10128-28-50","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"10128-28-50","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"10128-28-50","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈️ cloud_with_lightning_and_rain 🌤️ sun_behind_small_cloud 🌥️ sun_behind_large_cloud 🌦️ sun_behind_rain_cloud 🌧️ cloud_with_rain 🌨️ cloud_with_snow 🌩️ cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬️ wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☔ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ⛄ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"10128-28-50","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"活动 ","date":"10128-28-50","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟️ tickets 🎫 ticket ","date":"10128-28-50","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"10128-28-50","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"10128-28-50","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"10128-28-50","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼️ framed_picture 🎨 art ","date":"10128-28-50","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"物品 ","date":"10128-28-50","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"10128-28-50","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"10128-28-50","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"10128-28-50","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"10128-28-50","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"10128-28-50","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱️ computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"10128-28-50","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"10128-28-50","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"10128-28-50","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"10128-28-50","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 📧 email envelope 📧 :e-mail: 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳️ ballot_box ","date":"10128-28-50","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋️ fountain_pen 🖊️ pen 🖌️ paintbrush 🖍️ crayon 📝 memo pencil ","date":"10128-28-50","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒️ spiral_notepad 🗓️ spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇️ paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"10128-28-50","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"10128-28-50","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡️ dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜️ clamp ⚖️ balance_scale 🔗 link ⛓️ chains ","date":"10128-28-50","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 📡 satellite ","date":"10128-28-50","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"10128-28-50","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"10128-28-50","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"10128-28-50","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"符号 ","date":"10128-28-50","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"10128-28-50","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 :non-potable_water: 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢️ radioactive ☣️ biohazard ","date":"10128-28-50","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"10128-28-50","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉️ om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"10128-28-50","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"10128-28-50","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭️ next_track_button ⏯️ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸️ pause_button ⏹️ stop_button ⏺️ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"10128-28-50","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"10128-28-50","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"10128-28-50","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"10128-28-50","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"10128-28-50","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id Ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"10128-28-50","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"10128-28-50","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"10128-28-50","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旗帜 ","date":"10128-28-50","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳️ white_flag 🏳️‍🌈 rainbow_flag ","date":"10128-28-50","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"10128-28-50","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能.","date":"30359-59-20","objectID":"/theme-documentation-echarts-shortcode/","tags":["shortcodes"],"title":"主题文档 - echarts Shortcode","uri":"/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能. ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}} title: text: 折线统计图 top: 2% left: center tooltip: trigger: axis legend: data: - 邮件营销 - 联盟广告 - 视频广告 - 直接访问 - 搜索引擎 top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: 保存为图片 xAxis: type: category boundaryGap: false data: - 周一 - 周二 - 周三 - 周四 - 周五 - 周六 - 周日 yAxis: type: value series: - name: 邮件营销 type: line stack: 总量 data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: 联盟广告 type: line stack: 总量 data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: 视频广告 type: line stack: 总量 data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: 直接访问 type: line stack: 总量 data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: 搜索引擎 type: line stack: 总量 data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"30359-59-20","objectID":"/theme-documentation-echarts-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - echarts Shortcode","uri":"/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能.","date":"30359-59-10","objectID":"/theme-documentation-mapbox-shortcode/","tags":["shortcodes"],"title":"主题文档 - mapbox Shortcode","uri":"/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":" mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能. Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1?optimize=true\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1?optimize=true\" \u003e}} 呈现的输出效果如下: ","date":"30359-59-10","objectID":"/theme-documentation-mapbox-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - mapbox Shortcode","uri":"/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器.","date":"30359-59-120","objectID":"/theme-documentation-music-shortcode/","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"30359-59-120","objectID":"/theme-documentation-music-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"30359-59-120","objectID":"/theme-documentation-music-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"30359-59-120","objectID":"/theme-documentation-music-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"30359-59-120","objectID":"/theme-documentation-music-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"30359-59-120","objectID":"/theme-documentation-music-shortcode/:4:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器.","date":"30341-41-110","objectID":"/theme-documentation-bilibili-shortcode/","tags":["shortcodes"],"title":"主题文档 - bilibili Shortcode","uri":"/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":" bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: 如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: ","date":"30341-41-110","objectID":"/theme-documentation-bilibili-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - bilibili Shortcode","uri":"/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":"typeit shortcode 基于 TypeIt 库提供了打字动画.","date":"30359-59-100","objectID":"/theme-documentation-typeit-shortcode/","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"typeit shortcode 基于 TypeIt 库提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"30359-59-100","objectID":"/theme-documentation-typeit-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: 另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"30359-59-100","objectID":"/theme-documentation-typeit-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"30359-59-100","objectID":"/theme-documentation-typeit-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"30359-59-100","objectID":"/theme-documentation-typeit-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/theme-documentation-typeit-shortcode/"},{"categories":null,"content":"关于 LoveIt","date":"20249-49-110","objectID":"/about/","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt ","date":"20249-49-110","objectID":"/about/:0:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"特性 ","date":"20249-49-110","objectID":"/about/:1:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex 和 Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"20249-49-110","objectID":"/about/:1:1","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 76 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"20249-49-110","objectID":"/about/:1:2","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"20249-49-110","objectID":"/about/:1:3","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"20249-49-110","objectID":"/about/:2:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"20249-49-110","objectID":"/about/:3:0","tags":null,"title":"关于我","uri":"/about/"}]